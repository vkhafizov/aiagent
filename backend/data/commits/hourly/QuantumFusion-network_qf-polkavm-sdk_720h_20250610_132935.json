{
  "commits": [
    {
      "sha": "0a7f64ece658202bfbabe0f8aae9f945cb11749c",
      "message": "Merge pull request #19 from QuantumFusion-network/andor0/issue-331\n\nUpdate docs",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-26T11:50:29+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/0a7f64ece658202bfbabe0f8aae9f945cb11749c",
      "files_changed": [
        {
          "filename": "Makefile",
          "additions": 8,
          "deletions": 0,
          "changes": 8,
          "status": "added",
          "patch": "@@ -0,0 +1,8 @@\n+.PHONY: open-rustdoc rustdoc\n+\n+open-rustdoc: rustdoc\n+\tcargo doc --open\n+\n+rustdoc:\n+\trustdoc src/lib.rs -o target/doc\n+"
        },
        {
          "filename": "src/lib.rs",
          "additions": 74,
          "deletions": 2,
          "changes": 76,
          "status": "modified",
          "patch": "@@ -1,6 +1,51 @@\n #![no_std]\n #![no_main]\n \n+/// This macro includes a bump allocator and imports PolkaVM host functions into the code.\n+///\n+/// List of Host Functions:\n+///\n+/// 1. `balance() -> u64`\n+/// Returns the balance of the smart contract's address.\n+///\n+/// 2. `balance_of() -> u64`\n+/// Returns the balance of a specified address.\n+///\n+/// 3. `transfer(address_idx: u32, balance_idx: u32) -> u64`\n+///   - `address_idx`: Index in the `addresses` array.\n+///   - `balance_idx`: Index in the `balances` array.\n+/// Transfers balance from the smart contract's address to the specified address. Returns 0 on success.\n+///\n+/// 4. `block_number() -> u64`\n+/// Returns the current block number.\n+///\n+/// 5. `account_id() -> u64`\n+/// Returns the index of the smart contract's address in the `addresses` array.\n+///\n+/// 6. `caller() -> u64`\n+/// Returns the index of the caller's address in the `addresses` array.\n+///\n+/// 7. `get_user_data(pointer: u32) -> u64`\n+///   - `pointer`: Pointer to the user_data buffer.\n+///\n+/// Writes `user_data` to the specified pointer. Returns 0 on success.\n+///\n+/// 8. `get(storage_key_pointer: u32, pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+///   - `pointer`: Pointer to a buffer where the data will be stored.\n+/// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 on success.\n+///\n+/// 9. `set(storage_key_pointer: u32, pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+///   - `pointer`: Pointer to the data buffer.\n+/// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 on success.\n+///\n+/// 10. `delete(storage_key_pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+/// Deletes data from storage using the specified key. Returns 0 on success.\n+///\n+/// [Instruction to compile a smart-contract](https://github.com/QuantumFusion-network/qf-polkavm-sdk/?tab=readme-ov-file#compiling-example-smart-contract)\n+///\n #[macro_export]\n macro_rules! host_functions {\n     () => {\n@@ -132,18 +177,45 @@ macro_rules! host_functions {\n             }\n         }\n \n+        /// Host-functions available to call inside a smart-contract.\n         #[polkavm_derive::polkavm_import]\n         extern \"C\" {\n+            /// Returns the balance of the smart contract’s address.\n             fn balance() -> u64;\n+\n+            /// Returns the balance of a specified address.\n             fn balance_of() -> u64;\n-            fn print() -> u64;\n+\n+            /// Transfers balance from the smart contract's address to the specified address. Returns 0 on success.\n+            ///   - `address_idx`: Index in the `addresses` array.\n+            ///   - `balance_idx`: Index in the `balances` array.\n             fn transfer(address_idx: u32, balance_idx: u32) -> u64;\n+\n+            /// Returns the current block number.\n             fn block_number() -> u64;\n+\n+            /// Returns the index of the smart contract’s address in the addresses array.\n             fn account_id() -> u64;\n+\n+            /// Returns the index of the caller’s address in the addresses array.\n             fn caller() -> u64;\n+\n+            /// Writes `user_data` to the specified pointer. Returns 0 on success.\n+            ///   - `pointer`: Pointer to the user_data buffer.\n             fn get_user_data(pointer: u32) -> u64;\n+\n+            /// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 on success.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n+            ///   - `pointer`: Pointer to a buffer where the data will be stored.\n             fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n-            fn set(storage_key_pointer: u32, buffer: u32) -> u64;\n+\n+            /// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 on success.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n+            ///   - `pointer`: Pointer to the data buffer.\n+            fn set(storage_key_pointer: u32, pointer: u32) -> u64;\n+\n+            /// Deletes data from storage using the specified key. Returns 0 on success.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n             fn delete(storage_key_pointer: u32) -> u64;\n         }\n     };"
        }
      ],
      "additions": 82,
      "deletions": 2,
      "total_changes": 84,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "78f9995fddb97de7a6fde182ecbc0cc0bd805017",
      "message": "Update docs",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-20T13:45:46+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/78f9995fddb97de7a6fde182ecbc0cc0bd805017",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 13,
          "deletions": 11,
          "changes": 24,
          "status": "modified",
          "patch": "@@ -1,7 +1,9 @@\n #![no_std]\n #![no_main]\n \n-/// This macro includes a bump allocator and imports PolkaVM host functions:\n+/// This macro includes a bump allocator and imports PolkaVM host functions into the code.\n+///\n+/// List of Host Functions:\n ///\n /// 1. `balance() -> u64`\n /// Returns the balance of the smart contract's address.\n@@ -12,7 +14,7 @@\n /// 3. `transfer(address_idx: u32, balance_idx: u32) -> u64`\n ///   - `address_idx`: Index in the `addresses` array.\n ///   - `balance_idx`: Index in the `balances` array.\n-/// Transfers balance from the smart contract's address to the specified address. Returns 0 if successful.\n+/// Transfers balance from the smart contract's address to the specified address. Returns 0 on success.\n ///\n /// 4. `block_number() -> u64`\n /// Returns the current block number.\n@@ -26,21 +28,21 @@\n /// 7. `get_user_data(pointer: u32) -> u64`\n ///   - `pointer`: Pointer to the user_data buffer.\n ///\n-/// Writes `user_data` to the specified pointer. Returns 0 if successful.\n+/// Writes `user_data` to the specified pointer. Returns 0 on success.\n ///\n /// 8. `get(storage_key_pointer: u32, pointer: u32) -> u64`\n ///   - `storage_key_pointer`: Pointer to a storage key.\n ///   - `pointer`: Pointer to a buffer where the data will be stored.\n-/// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 if successful.\n+/// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 on success.\n ///\n /// 9. `set(storage_key_pointer: u32, pointer: u32) -> u64`\n ///   - `storage_key_pointer`: Pointer to a storage key.\n ///   - `pointer`: Pointer to the data buffer.\n-/// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 if successful.\n+/// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 on success.\n ///\n /// 10. `delete(storage_key_pointer: u32) -> u64`\n ///   - `storage_key_pointer`: Pointer to a storage key.\n-/// Deletes data from storage using the specified key. Returns 0 if successful.\n+/// Deletes data from storage using the specified key. Returns 0 on success.\n ///\n /// [Instruction to compile a smart-contract](https://github.com/QuantumFusion-network/qf-polkavm-sdk/?tab=readme-ov-file#compiling-example-smart-contract)\n ///\n@@ -184,7 +186,7 @@ macro_rules! host_functions {\n             /// Returns the balance of a specified address.\n             fn balance_of() -> u64;\n \n-            /// Transfers balance from the smart contract's address to the specified address. Returns 0 if successful.\n+            /// Transfers balance from the smart contract's address to the specified address. Returns 0 on success.\n             ///   - `address_idx`: Index in the `addresses` array.\n             ///   - `balance_idx`: Index in the `balances` array.\n             fn transfer(address_idx: u32, balance_idx: u32) -> u64;\n@@ -198,21 +200,21 @@ macro_rules! host_functions {\n             /// Returns the index of the caller’s address in the addresses array.\n             fn caller() -> u64;\n \n-            /// Writes `user_data` to the specified pointer. Returns 0 if successful.\n+            /// Writes `user_data` to the specified pointer. Returns 0 on success.\n             ///   - `pointer`: Pointer to the user_data buffer.\n             fn get_user_data(pointer: u32) -> u64;\n \n-            /// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 if successful.\n+            /// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 on success.\n             ///   - `storage_key_pointer`: Pointer to a storage key.\n             ///   - `pointer`: Pointer to a buffer where the data will be stored.\n             fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n \n-            /// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 if successful.\n+            /// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 on success.\n             ///   - `storage_key_pointer`: Pointer to a storage key.\n             ///   - `pointer`: Pointer to the data buffer.\n             fn set(storage_key_pointer: u32, pointer: u32) -> u64;\n \n-            /// Deletes data from storage using the specified key. Returns 0 if successful.\n+            /// Deletes data from storage using the specified key. Returns 0 on success.\n             ///   - `storage_key_pointer`: Pointer to a storage key.\n             fn delete(storage_key_pointer: u32) -> u64;\n         }"
        }
      ],
      "additions": 13,
      "deletions": 11,
      "total_changes": 24,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "f492bb85dcf23c92fc5ecbdf43e1428f27aaa3e0",
      "message": "Add Makefile",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-20T13:45:21+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/f492bb85dcf23c92fc5ecbdf43e1428f27aaa3e0",
      "files_changed": [
        {
          "filename": "Makefile",
          "additions": 8,
          "deletions": 0,
          "changes": 8,
          "status": "added",
          "patch": "@@ -0,0 +1,8 @@\n+.PHONY: open-rustdoc rustdoc\n+\n+open-rustdoc: rustdoc\n+\tcargo doc --open\n+\n+rustdoc:\n+\trustdoc src/lib.rs -o target/doc\n+"
        }
      ],
      "additions": 8,
      "deletions": 0,
      "total_changes": 8,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "8190ec66695976fac5a934fa5844ed667f7e869a",
      "message": "Cargo fmt",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-20T13:38:22+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/8190ec66695976fac5a934fa5844ed667f7e869a",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 4,
          "deletions": 4,
          "changes": 8,
          "status": "modified",
          "patch": "@@ -2,7 +2,7 @@\n #![no_main]\n \n /// This macro includes a bump allocator and imports PolkaVM host functions:\n-/// \n+///\n /// 1. `balance() -> u64`\n /// Returns the balance of the smart contract's address.\n ///\n@@ -37,11 +37,11 @@\n ///   - `storage_key_pointer`: Pointer to a storage key.\n ///   - `pointer`: Pointer to the data buffer.\n /// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 if successful.\n-/// \n+///\n /// 10. `delete(storage_key_pointer: u32) -> u64`\n ///   - `storage_key_pointer`: Pointer to a storage key.\n /// Deletes data from storage using the specified key. Returns 0 if successful.\n-/// \n+///\n /// [Instruction to compile a smart-contract](https://github.com/QuantumFusion-network/qf-polkavm-sdk/?tab=readme-ov-file#compiling-example-smart-contract)\n ///\n #[macro_export]\n@@ -178,7 +178,7 @@ macro_rules! host_functions {\n         /// Host-functions available to call inside a smart-contract.\n         #[polkavm_derive::polkavm_import]\n         extern \"C\" {\n-            /// Returns the balance of the smart contract’s address. \n+            /// Returns the balance of the smart contract’s address.\n             fn balance() -> u64;\n \n             /// Returns the balance of a specified address."
        }
      ],
      "additions": 4,
      "deletions": 4,
      "total_changes": 8,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "adbb73906820f5b176798c4b1df0f115683ecd2c",
      "message": "Update docs",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-20T13:37:51+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/adbb73906820f5b176798c4b1df0f115683ecd2c",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 51,
          "deletions": 47,
          "changes": 98,
          "status": "modified",
          "patch": "@@ -1,43 +1,47 @@\n #![no_std]\n #![no_main]\n-/// This macro includes a bump allocator and imports of PolkaVM host-functions:\n-/// 1. `balance() -> u64` returns Balance of smart-contract address.\n-///\n-/// 2. `balance_of() -> u64` returns of some address.\n+\n+/// This macro includes a bump allocator and imports PolkaVM host functions:\n+/// \n+/// 1. `balance() -> u64`\n+/// Returns the balance of the smart contract's address.\n ///\n-/// 3. `transfer(address_idx: u32, balance_idx: u32) -> u64` gets:\n-/// - `address_idx` is index in `addresses`.\n-/// - `balance_idx` is index in `balances`.\n-/// This function does transfer from smart-contract address to some address, returns 0 if transfer is\n-/// successful.\n+/// 2. `balance_of() -> u64`\n+/// Returns the balance of a specified address.\n ///\n-/// 4. `block_number() -> u64` returns block number.\n+/// 3. `transfer(address_idx: u32, balance_idx: u32) -> u64`\n+///   - `address_idx`: Index in the `addresses` array.\n+///   - `balance_idx`: Index in the `balances` array.\n+/// Transfers balance from the smart contract's address to the specified address. Returns 0 if successful.\n ///\n-/// 5. `account_id() -> u64` returns index of smart-contract address in `addresses`.\n+/// 4. `block_number() -> u64`\n+/// Returns the current block number.\n ///\n-/// 6. `caller() -> u64` returns index of caller address in `addresses`.\n+/// 5. `account_id() -> u64`\n+/// Returns the index of the smart contract's address in the `addresses` array.\n ///\n-/// 7. `get_user_data(pointer: u32) -> u64` gets:\n-/// - `pointer` is pointer to `user_data`.\n-/// This function puts `user_user` data by the `pointer` and returns 0 if there are not errors.\n+/// 6. `caller() -> u64`\n+/// Returns the index of the caller's address in the `addresses` array.\n ///\n-/// 8. `get(storage_key_pointer: u32, pointer: u32) -> u64` gets:\n-/// - `storage_key_pointer` is a pointer to some key in storage.\n-/// - `pointer` is a pointer to some buffer where data will be stored.\n-/// This function reads data from storage by the pointer of key (`storage_key_pointer`) and\n-/// stores it by `pointer`, returns 0 if there are not errors.\n+/// 7. `get_user_data(pointer: u32) -> u64`\n+///   - `pointer`: Pointer to the user_data buffer.\n ///\n-/// 9. `set(storage_key_pointer: u32, pointer: u32) -> u64` gets:\n-/// - `storage_key_pointer` is a pointer to some key in storage.\n-/// - `pointer` is a pointer to some buffer with data.\n-/// This function writes data from `pointer` to storage by the pointer of key\n-/// (`storage_key_pointer`), returns 0 if there are not errors.\n+/// Writes `user_data` to the specified pointer. Returns 0 if successful.\n ///\n-/// 10. `delete(storage_key_pointer: u32) -> u64` gets:\n-/// - `storage_key_pointer` is pointer to some key in storage.\n-/// This function delete date from storage by pointer `storage_key_pointer`, \n-/// returns 0 if there are not errors.\n+/// 8. `get(storage_key_pointer: u32, pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+///   - `pointer`: Pointer to a buffer where the data will be stored.\n+/// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 if successful.\n ///\n+/// 9. `set(storage_key_pointer: u32, pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+///   - `pointer`: Pointer to the data buffer.\n+/// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 if successful.\n+/// \n+/// 10. `delete(storage_key_pointer: u32) -> u64`\n+///   - `storage_key_pointer`: Pointer to a storage key.\n+/// Deletes data from storage using the specified key. Returns 0 if successful.\n+/// \n /// [Instruction to compile a smart-contract](https://github.com/QuantumFusion-network/qf-polkavm-sdk/?tab=readme-ov-file#compiling-example-smart-contract)\n ///\n #[macro_export]\n@@ -174,42 +178,42 @@ macro_rules! host_functions {\n         /// Host-functions available to call inside a smart-contract.\n         #[polkavm_derive::polkavm_import]\n         extern \"C\" {\n-            /// Balance of smart-contract address.\n+            /// Returns the balance of the smart contract’s address. \n             fn balance() -> u64;\n \n-            /// Balance of some address.\n+            /// Returns the balance of a specified address.\n             fn balance_of() -> u64;\n \n-            /// Transfer from smart-contract address to some address.\n-            /// - `address_idx` is index in addresses.\n-            /// - `balance_idx` is index in balances.\n+            /// Transfers balance from the smart contract's address to the specified address. Returns 0 if successful.\n+            ///   - `address_idx`: Index in the `addresses` array.\n+            ///   - `balance_idx`: Index in the `balances` array.\n             fn transfer(address_idx: u32, balance_idx: u32) -> u64;\n \n-            /// Block number.\n+            /// Returns the current block number.\n             fn block_number() -> u64;\n \n-            /// Smart-contract address.\n+            /// Returns the index of the smart contract’s address in the addresses array.\n             fn account_id() -> u64;\n \n-            /// Caller address.\n+            /// Returns the index of the caller’s address in the addresses array.\n             fn caller() -> u64;\n \n-            /// Get user_data.\n-            /// `pointer` is pointer to `user_data`.\n+            /// Writes `user_data` to the specified pointer. Returns 0 if successful.\n+            ///   - `pointer`: Pointer to the user_data buffer.\n             fn get_user_data(pointer: u32) -> u64;\n \n-            /// Get data from storage.\n-            /// - `storage_key_pointer` is a pointer to some key in storage.\n-            /// - `pointer` is a pointer to some buffer where data will be stored.\n+            /// Reads data from storage using the key at `storage_key_pointer` and stores it at pointer. Returns 0 if successful.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n+            ///   - `pointer`: Pointer to a buffer where the data will be stored.\n             fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n \n-            /// Set data to storage.\n-            /// - `storage_key_pointer` is a pointer to some key in storage.\n-            /// - `pointer` is a pointer to some buffer with data.\n+            /// Writes data from pointer to storage using the key at `storage_key_pointer`. Returns 0 if successful.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n+            ///   - `pointer`: Pointer to the data buffer.\n             fn set(storage_key_pointer: u32, pointer: u32) -> u64;\n \n-            /// Delete data from storage.\n-            /// - `storage_key_pointer` is pointer to some key in storage.\n+            /// Deletes data from storage using the specified key. Returns 0 if successful.\n+            ///   - `storage_key_pointer`: Pointer to a storage key.\n             fn delete(storage_key_pointer: u32) -> u64;\n         }\n     };"
        }
      ],
      "additions": 51,
      "deletions": 47,
      "total_changes": 98,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "48f7281b6a268d63e42e5e777dba29124b837472",
      "message": "Update docs",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-20T13:14:25+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/48f7281b6a268d63e42e5e777dba29124b837472",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 69,
          "deletions": 3,
          "changes": 72,
          "status": "modified",
          "patch": "@@ -1,6 +1,45 @@\n #![no_std]\n #![no_main]\n-\n+/// This macro includes a bump allocator and imports of PolkaVM host-functions:\n+/// 1. `balance() -> u64` returns Balance of smart-contract address.\n+///\n+/// 2. `balance_of() -> u64` returns of some address.\n+///\n+/// 3. `transfer(address_idx: u32, balance_idx: u32) -> u64` gets:\n+/// - `address_idx` is index in `addresses`.\n+/// - `balance_idx` is index in `balances`.\n+/// This function does transfer from smart-contract address to some address, returns 0 if transfer is\n+/// successful.\n+///\n+/// 4. `block_number() -> u64` returns block number.\n+///\n+/// 5. `account_id() -> u64` returns index of smart-contract address in `addresses`.\n+///\n+/// 6. `caller() -> u64` returns index of caller address in `addresses`.\n+///\n+/// 7. `get_user_data(pointer: u32) -> u64` gets:\n+/// - `pointer` is pointer to `user_data`.\n+/// This function puts `user_user` data by the `pointer` and returns 0 if there are not errors.\n+///\n+/// 8. `get(storage_key_pointer: u32, pointer: u32) -> u64` gets:\n+/// - `storage_key_pointer` is a pointer to some key in storage.\n+/// - `pointer` is a pointer to some buffer where data will be stored.\n+/// This function reads data from storage by the pointer of key (`storage_key_pointer`) and\n+/// stores it by `pointer`, returns 0 if there are not errors.\n+///\n+/// 9. `set(storage_key_pointer: u32, pointer: u32) -> u64` gets:\n+/// - `storage_key_pointer` is a pointer to some key in storage.\n+/// - `pointer` is a pointer to some buffer with data.\n+/// This function writes data from `pointer` to storage by the pointer of key\n+/// (`storage_key_pointer`), returns 0 if there are not errors.\n+///\n+/// 10. `delete(storage_key_pointer: u32) -> u64` gets:\n+/// - `storage_key_pointer` is pointer to some key in storage.\n+/// This function delete date from storage by pointer `storage_key_pointer`, \n+/// returns 0 if there are not errors.\n+///\n+/// [Instruction to compile a smart-contract](https://github.com/QuantumFusion-network/qf-polkavm-sdk/?tab=readme-ov-file#compiling-example-smart-contract)\n+///\n #[macro_export]\n macro_rules! host_functions {\n     () => {\n@@ -132,18 +171,45 @@ macro_rules! host_functions {\n             }\n         }\n \n+        /// Host-functions available to call inside a smart-contract.\n         #[polkavm_derive::polkavm_import]\n         extern \"C\" {\n+            /// Balance of smart-contract address.\n             fn balance() -> u64;\n+\n+            /// Balance of some address.\n             fn balance_of() -> u64;\n-            fn print() -> u64;\n+\n+            /// Transfer from smart-contract address to some address.\n+            /// - `address_idx` is index in addresses.\n+            /// - `balance_idx` is index in balances.\n             fn transfer(address_idx: u32, balance_idx: u32) -> u64;\n+\n+            /// Block number.\n             fn block_number() -> u64;\n+\n+            /// Smart-contract address.\n             fn account_id() -> u64;\n+\n+            /// Caller address.\n             fn caller() -> u64;\n+\n+            /// Get user_data.\n+            /// `pointer` is pointer to `user_data`.\n             fn get_user_data(pointer: u32) -> u64;\n+\n+            /// Get data from storage.\n+            /// - `storage_key_pointer` is a pointer to some key in storage.\n+            /// - `pointer` is a pointer to some buffer where data will be stored.\n             fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n-            fn set(storage_key_pointer: u32, buffer: u32) -> u64;\n+\n+            /// Set data to storage.\n+            /// - `storage_key_pointer` is a pointer to some key in storage.\n+            /// - `pointer` is a pointer to some buffer with data.\n+            fn set(storage_key_pointer: u32, pointer: u32) -> u64;\n+\n+            /// Delete data from storage.\n+            /// - `storage_key_pointer` is pointer to some key in storage.\n             fn delete(storage_key_pointer: u32) -> u64;\n         }\n     };"
        }
      ],
      "additions": 69,
      "deletions": 3,
      "total_changes": 72,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "8b3fe3af048600a0f7461f89492bd522364f69bc",
      "message": "Merge pull request #15 from QuantumFusion-network/khssnv/exec-guide\n\nAdd `Call the smart contract function` guide",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-17T18:33:03+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/8b3fe3af048600a0f7461f89492bd522364f69bc",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "status": "modified",
          "patch": "@@ -46,6 +46,10 @@ The QF Network executes smart contracts in the PolkaVM virtual machine and requi\n         -o \"output/${CRATE_NAME}.polkavm\"\n     ```\n \n+## Deploy and call a smart contract\n+\n+See [guides.md](guides.md).\n+\n ## Contributing\n \n We welcome contributions of all kinds! Whether you're reporting or fixing a bug, adding a feature, or improving"
        },
        {
          "filename": "guides.md",
          "additions": 44,
          "deletions": 0,
          "changes": 44,
          "status": "modified",
          "patch": "@@ -36,4 +36,48 @@ See [Compiling example Smart Contract](README.md#compiling-example-smart-contrac\n \n 1. Scroll to the bottom to find `qfPolkaVM.codeAddress: Option<AccountId32>`. The address below is your deployed contract address. Use it to interact with the contract. You can use it further it to interact with the contract.\n \n+## Call the smart contract function\n+\n+The following steps assume that you are using the [hello-qf-polkavm](examples/hello-qf-polkavm) smart contract.\n+\n+1. Open the QF Network Portal [^1] at <https://portal.qfnetwork.xyz/> and connect your wallet accounts.\n+\n+1. Let's first check the current state of the smart contract before modifying it. Navigate to `Developer, Chain State`.\n+\n+1. Select the `qfPolkaVM` runtime module and the `codeStorage((AccountId32,Bytes)): Option<Bytes>` storage item.\n+\n+1. Enter the deployed smart contract address in the first input field under `AccountId32`.\n+\n+1. Enter the deployment index of the smart contract in the second input field under `u64`. This is the sequential number of the deployment from the selected account (starting from 1).\n+\n+1. Enter the following string in the third field under `Bytes`. This value is part of the [hello-qf-polkavm](examples/hello-qf-polkavm) contract and represents a hex-encoded key used for accessing a value in the contract's storage.\n+\n+    ```console\n+    0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\n+    ```\n+\n+1. Click the `+` button to the right of the runtime module and storage item selectors to send the query.\n+\n+1. Scroll to the bottom and locate the field under `qfPolkaVM.codeStorage: Option<Bytes>`. This field shows the current stored value which we will change further calling the smart contract function.\n+\n+    If it shows `<none>`, the contract has not been called yet and the value is unset - a number will appear after the first call.\n+\n+1. Now let's send a transaction that calls a function of the smart contract. Navigate to `Developer, Extrinsics`.\n+\n+1. Select the account you want to use for this transaction.\n+\n+1. Choose the `qfPolkaVM` runtime module and select the `execute(contractAddress, to, value, userData, gasLimit, gasPrice)` extrinsic.\n+\n+1. Set the following parameters:\n+    - `contractAddress: AccountId32`: the deployed contract address.\n+    - `to: AccountId32`: not used for this call, leave the default value.\n+    - `value: u128`: not used for this call, leave the default value.\n+    - `userData: Bytes`: set to `0x05`. This value corresponds to the `increment` operation in the [hello-qf-polkavm](examples/hello-qf-polkavm) contract.\n+    - `gasLimit: u32`: set to `100000`.\n+    - `gasPrice: u64`: set to `1`. The smart contracts pricing model is under development. Currently, users can set the gas price manually, which enables flexible experimentation.\n+\n+1. Click `Submit Transaction`, then `Sign and Submit`, and confirm the transaction in your wallet.\n+\n+1. Repeat steps 2 - 8 to verify the change in stored value. Each call with `0x05 (increment operation)` increments the stored value by 1.\n+\n [^1]: [QF Network Portal](https://portal.qfnetwork.xyz/) is a fork of the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/)."
        }
      ],
      "additions": 48,
      "deletions": 0,
      "total_changes": 48,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "af9e242c91e77950fc45b5339329db5560af94a4",
      "message": "Update README.md",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T18:19:33+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/af9e242c91e77950fc45b5339329db5560af94a4",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 4,
          "deletions": 0,
          "changes": 4,
          "status": "modified",
          "patch": "@@ -46,6 +46,10 @@ The QF Network executes smart contracts in the PolkaVM virtual machine and requi\n         -o \"output/${CRATE_NAME}.polkavm\"\n     ```\n \n+## Deploy and call a smart contract\n+\n+See [guides.md](guides.md).\n+\n ## Contributing\n \n We welcome contributions of all kinds! Whether you're reporting or fixing a bug, adding a feature, or improving"
        }
      ],
      "additions": 4,
      "deletions": 0,
      "total_changes": 4,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "43acc1986580c5a68a4647352516db5ba8375522",
      "message": "Add `Call the smart contract function` guide",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T18:17:53+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/43acc1986580c5a68a4647352516db5ba8375522",
      "files_changed": [
        {
          "filename": "guides.md",
          "additions": 44,
          "deletions": 0,
          "changes": 44,
          "status": "modified",
          "patch": "@@ -36,4 +36,48 @@ See [Compiling example Smart Contract](README.md#compiling-example-smart-contrac\n \n 1. Scroll to the bottom to find `qfPolkaVM.codeAddress: Option<AccountId32>`. The address below is your deployed contract address. Use it to interact with the contract. You can use it further it to interact with the contract.\n \n+## Call the smart contract function\n+\n+The following steps assume that you are using the [hello-qf-polkavm](examples/hello-qf-polkavm) smart contract.\n+\n+1. Open the QF Network Portal [^1] at <https://portal.qfnetwork.xyz/> and connect your wallet accounts.\n+\n+1. Let's first check the current state of the smart contract before modifying it. Navigate to `Developer, Chain State`.\n+\n+1. Select the `qfPolkaVM` runtime module and the `codeStorage((AccountId32,Bytes)): Option<Bytes>` storage item.\n+\n+1. Enter the deployed smart contract address in the first input field under `AccountId32`.\n+\n+1. Enter the deployment index of the smart contract in the second input field under `u64`. This is the sequential number of the deployment from the selected account (starting from 1).\n+\n+1. Enter the following string in the third field under `Bytes`. This value is part of the [hello-qf-polkavm](examples/hello-qf-polkavm) contract and represents a hex-encoded key used for accessing a value in the contract's storage.\n+\n+    ```console\n+    0xn+    ```\n+\n+1. Click the `+` button to the right of the runtime module and storage item selectors to send the query.\n+\n+1. Scroll to the bottom and locate the field under `qfPolkaVM.codeStorage: Option<Bytes>`. This field shows the current stored value which we will change further calling the smart contract function.\n+\n+    If it shows `<none>`, the contract has not been called yet and the value is unset - a number will appear after the first call.\n+\n+1. Now let's send a transaction that calls a function of the smart contract. Navigate to `Developer, Extrinsics`.\n+\n+1. Select the account you want to use for this transaction.\n+\n+1. Choose the `qfPolkaVM` runtime module and select the `execute(contractAddress, to, value, userData, gasLimit, gasPrice)` extrinsic.\n+\n+1. Set the following parameters:\n+    - `contractAddress: AccountId32`: the deployed contract address.\n+    - `to: AccountId32`: not used for this call, leave the default value.\n+    - `value: u128`: not used for this call, leave the default value.\n+    - `userData: Bytes`: set to `0x05`. This value corresponds to the `increment` operation in the [hello-qf-polkavm](examples/hello-qf-polkavm) contract.\n+    - `gasLimit: u32`: set to `100000`.\n+    - `gasPrice: u64`: set to `1`. The smart contracts pricing model is under development. Currently, users can set the gas price manually, which enables flexible experimentation.\n+\n+1. Click `Submit Transaction`, then `Sign and Submit`, and confirm the transaction in your wallet.\n+\n+1. Repeat steps 2 - 8 to verify the change in stored value. Each call with `0x05 (increment operation)` increments the stored value by 1.\n+\n [^1]: [QF Network Portal](https://portal.qfnetwork.xyz/) is a fork of the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/)."
        }
      ],
      "additions": 44,
      "deletions": 0,
      "total_changes": 44,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "a118994327c5296db7ea97991c65523f48c8c539",
      "message": "Merge pull request #14 from QuantumFusion-network/khssnv/guide\n\nSmart contract operation guides",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-17T15:43:48+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/a118994327c5296db7ea97991c65523f48c8c539",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 25,
          "deletions": 42,
          "changes": 67,
          "status": "modified",
          "patch": "@@ -1,8 +1,6 @@\n <div align=\"center\">\n \n-![Logo](Logo.jpg)\n-\n-# Quantum Fusion\n+# QF Network PolkaVM SDK\n \n [![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-polkavm-sdk/blob/main/LICENSE)\n <br>\n@@ -14,51 +12,39 @@\n \n </div>\n \n-For contributing to this project, please read [Contributing](#contributing) section.\n-\n-# QF PolkaVM SDK\n-\n-This framework allows to implement contracts for Quantum Fusion Network.\n-\n-For getting more technical information please follow to this [link](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n+This framework enables the development of smart contracts for the Quantum Fusion Network. For the smart contract platform implementation details, please refer to the [PolkaVM pallet documentation](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n \n-## Run examples\n-\n-To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/).\n-\n-## Executables and runtimes\n+For contributing to this project, please read [Contributing](#contributing) section.\n \n-This section describes the project's executables and runtimes and provides step-by-step instructions\n- for running a local testnet. This guide is suitable for advanced users.\n-See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n+## Compiling example Smart Contract\n \n-## Compiling Smart Contracts for PolkaVM\n+The QF Network executes smart contracts in the PolkaVM virtual machine and requires PolkaVM tools for smart contracts compilation.\n \n-1. Install `polkatool`\n+1. Install `polkatool`.\n \n-```bash\n-cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n-```\n+    ```bash\n+    cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n+    ```\n \n-2. Build smart-contract `examples/hello-qf-polkavm`\n+1. Build smart-contract `examples/hello-qf-polkavm`.\n \n-```bash\n-export CRATE_NAME=hello-qf-polkavm\n-mkdir -p output\n+    ```bash\n+    export CRATE_NAME=hello-qf-polkavm\n+    mkdir -p output\n \n-pushd \"examples/${CRATE_NAME}\"\n-RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n-        -Z build-std=core,alloc \\\n-        --target $(polkatool get-target-json-path --bitness 32) \\\n-        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n-popd\n+    pushd \"examples/${CRATE_NAME}\"\n+    RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+        cargo +nightly build \\\n+            -Z build-std=core,alloc \\\n+            --target $(polkatool get-target-json-path --bitness 32) \\\n+            -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+    popd\n \n-polkatool link \\\n-    --run-only-if-newer \\\n-    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n-    -o \"output/${CRATE_NAME}.polkavm\"\n-```\n+    polkatool link \\\n+        --run-only-if-newer \\\n+        -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+        -o \"output/${CRATE_NAME}.polkavm\"\n+    ```\n \n ## Contributing\n \n@@ -75,6 +61,3 @@ By contributing, you agree to adhere to our [Contributor Covenant Code of Conduc\n a respectful and inclusive environment.\n \n We appreciate your support and look forward to your contributions! 🚀\n-\n-[^1]: <https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811#the-compilation-pipeline-7> \"The compilation pipeline\".\n-[^2]: <https://github.com/paritytech/polkadot-sdk/tree/master/substrate/bin/utils/chain-spec-builder> \"chain-spec-builder\"."
        },
        {
          "filename": "guides.md",
          "additions": 39,
          "deletions": 0,
          "changes": 39,
          "status": "added",
          "patch": "@@ -0,0 +1,39 @@\n+# Guides\n+\n+## Compile your first smart contract\n+\n+See [Compiling example Smart Contract](README.md#compiling-example-smart-contract).\n+\n+## Deploy the compiled smart contract\n+\n+1. Open the QF Network Portal [^1] at <https://portal.qfnetwork.xyz/> and connect your wallet accounts.\n+\n+1. Click the logo in the top-left corner to open network selector.\n+\n+1. Expand `DEV NETWORKS` group and select `QF Devnet` (at the time of writing, smart contracts are only available on QF Devnet).\n+\n+1. Hover over `Developer` in the top menu and click on `Extrinsics`.\n+\n+1. Select the account you want to use for deployment.\n+\n+1. Below in the runtime module dropdown (default is `system`), select `qfPolkaVM`.\n+\n+1. To the right of the runtime module dropdown, in the extrinsic selector (default is `execute(contractAddress, ...)`), select `upload(programBlob)`.\n+\n+1. Below in the `programBlob: Bytes` input field, toggle `file upload` on the right.\n+\n+1. Click or drag-and-drop the compiled smart contract output into the upload area (`click to select or drag and drop the file here`).\n+\n+1. Click `Submit Transaction`, then `Sign and Submit`, and confirm in your wallet. Your smart contract is now deployed! 🎉\n+\n+1. To retrieve the deployed contract address navigate to `Developer, Chain state`, select `qfPolkaVM` at the runtime module selector, and `codeAddress((AccountId32,u64)): Option<AccountId32>` to the right of the runtime module selector in the storage item selector.\n+\n+1. In the account selector, choose the same account used for deployment.\n+\n+1. In the `u64` field, enter the deployment index (starting from 1) to get the address.\n+\n+1. To the right-hand of the storage item selector, click `+` to execute the query.\n+\n+1. Scroll to the bottom to find `qfPolkaVM.codeAddress: Option<AccountId32>`. The address below is your deployed contract address. Use it to interact with the contract. You can use it further it to interact with the contract.\n+\n+[^1]: [QF Network Portal](https://portal.qfnetwork.xyz/) is a fork of the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/)."
        }
      ],
      "additions": 64,
      "deletions": 42,
      "total_changes": 106,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "e09b852c230698d3399e8b26cfbfce358c55a924",
      "message": "Add `guides.md` with the deployment guide",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T15:34:58+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/e09b852c230698d3399e8b26cfbfce358c55a924",
      "files_changed": [
        {
          "filename": "guides.md",
          "additions": 39,
          "deletions": 0,
          "changes": 39,
          "status": "added",
          "patch": "@@ -0,0 +1,39 @@\n+# Guides\n+\n+## Compile your first smart contract\n+\n+See [Compiling example Smart Contract](README.md#compiling-example-smart-contract).\n+\n+## Deploy the compiled smart contract\n+\n+1. Open the QF Network Portal [^1] at <https://portal.qfnetwork.xyz/> and connect your wallet accounts.\n+\n+1. Click the logo in the top-left corner to open network selector.\n+\n+1. Expand `DEV NETWORKS` group and select `QF Devnet` (at the time of writing, smart contracts are only available on QF Devnet).\n+\n+1. Hover over `Developer` in the top menu and click on `Extrinsics`.\n+\n+1. Select the account you want to use for deployment.\n+\n+1. Below in the runtime module dropdown (default is `system`), select `qfPolkaVM`.\n+\n+1. To the right of the runtime module dropdown, in the extrinsic selector (default is `execute(contractAddress, ...)`), select `upload(programBlob)`.\n+\n+1. Below in the `programBlob: Bytes` input field, toggle `file upload` on the right.\n+\n+1. Click or drag-and-drop the compiled smart contract output into the upload area (`click to select or drag and drop the file here`).\n+\n+1. Click `Submit Transaction`, then `Sign and Submit`, and confirm in your wallet. Your smart contract is now deployed! 🎉\n+\n+1. To retrieve the deployed contract address navigate to `Developer, Chain state`, select `qfPolkaVM` at the runtime module selector, and `codeAddress((AccountId32,u64)): Option<AccountId32>` to the right of the runtime module selector in the storage item selector.\n+\n+1. In the account selector, choose the same account used for deployment.\n+\n+1. In the `u64` field, enter the deployment index (starting from 1) to get the address.\n+\n+1. To the right-hand of the storage item selector, click `+` to execute the query.\n+\n+1. Scroll to the bottom to find `qfPolkaVM.codeAddress: Option<AccountId32>`. The address below is your deployed contract address. Use it to interact with the contract. You can use it further it to interact with the contract.\n+\n+[^1]: [QF Network Portal](https://portal.qfnetwork.xyz/) is a fork of the [Polkadot/Substrate Portal](https://polkadot.js.org/apps/)."
        }
      ],
      "additions": 39,
      "deletions": 0,
      "total_changes": 39,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "0dd44bfcc8c63cb3e828a325f484403df66001bf",
      "message": "Update README.md",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T14:43:39+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/0dd44bfcc8c63cb3e828a325f484403df66001bf",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 5,
          "deletions": 9,
          "changes": 14,
          "status": "modified",
          "patch": "@@ -1,8 +1,6 @@\n <div align=\"center\">\n \n-![Logo](Logo.jpg)\n-\n-# Quantum Fusion\n+# QF Network PolkaVM SDK\n \n [![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-polkavm-sdk/blob/main/LICENSE)\n <br>\n@@ -14,15 +12,13 @@\n \n </div>\n \n-For contributing to this project, please read [Contributing](#contributing) section.\n-\n-# QF PolkaVM SDK\n+This framework enables the development of smart contracts for the Quantum Fusion Network. For the smart contract platform implementation details, please refer to the [PolkaVM pallet documentation](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n \n-This framework allows to implement contracts for Quantum Fusion Network.\n+For contributing to this project, please read [Contributing](#contributing) section.\n \n-For getting more technical information please follow to this [link](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n+## Compiling example Smart Contract\n \n-## Compiling Smart Contracts for PolkaVM\n+The QF Network executes smart contracts in the PolkaVM virtual machine and requires PolkaVM tools for smart contracts compilation.\n \n 1. Install `polkatool`.\n "
        }
      ],
      "additions": 5,
      "deletions": 9,
      "total_changes": 14,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "3a4ccb3c48da488a8bae9c57751286661e262d89",
      "message": "Format markdown list",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T14:34:19+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/3a4ccb3c48da488a8bae9c57751286661e262d89",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 20,
          "deletions": 24,
          "changes": 44,
          "status": "modified",
          "patch": "@@ -22,37 +22,33 @@ This framework allows to implement contracts for Quantum Fusion Network.\n \n For getting more technical information please follow to this [link](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n \n-## Run examples\n-\n-To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/).\n-\n ## Compiling Smart Contracts for PolkaVM\n \n-1. Install `polkatool`\n+1. Install `polkatool`.\n \n-```bash\n-cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n-```\n+    ```bash\n+    cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n+    ```\n \n-2. Build smart-contract `examples/hello-qf-polkavm`\n+1. Build smart-contract `examples/hello-qf-polkavm`.\n \n-```bash\n-export CRATE_NAME=hello-qf-polkavm\n-mkdir -p output\n+    ```bash\n+    export CRATE_NAME=hello-qf-polkavm\n+    mkdir -p output\n \n-pushd \"examples/${CRATE_NAME}\"\n-RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n-        -Z build-std=core,alloc \\\n-        --target $(polkatool get-target-json-path --bitness 32) \\\n-        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n-popd\n+    pushd \"examples/${CRATE_NAME}\"\n+    RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+        cargo +nightly build \\\n+            -Z build-std=core,alloc \\\n+            --target $(polkatool get-target-json-path --bitness 32) \\\n+            -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+    popd\n \n-polkatool link \\\n-    --run-only-if-newer \\\n-    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n-    -o \"output/${CRATE_NAME}.polkavm\"\n-```\n+    polkatool link \\\n+        --run-only-if-newer \\\n+        -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+        -o \"output/${CRATE_NAME}.polkavm\"\n+    ```\n \n ## Contributing\n "
        }
      ],
      "additions": 20,
      "deletions": 24,
      "total_changes": 44,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "4ccd546bc4bcc4e30a12f8135e1ecc108dfe7a7c",
      "message": "Remove nonsense from README.md",
      "author": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "committer": {
        "name": "Alisher A. Khassanov",
        "email": "a.khssnv@gmail.com",
        "username": "khssnv",
        "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
      },
      "timestamp": "2025-05-17T14:04:29+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/4ccd546bc4bcc4e30a12f8135e1ecc108dfe7a7c",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "modified",
          "patch": "@@ -26,12 +26,6 @@ For getting more technical information please follow to this [link](https://gith\n \n To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/).\n \n-## Executables and runtimes\n-\n-This section describes the project's executables and runtimes and provides step-by-step instructions\n- for running a local testnet. This guide is suitable for advanced users.\n-See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n-\n ## Compiling Smart Contracts for PolkaVM\n \n 1. Install `polkatool`\n@@ -75,6 +69,3 @@ By contributing, you agree to adhere to our [Contributor Covenant Code of Conduc\n a respectful and inclusive environment.\n \n We appreciate your support and look forward to your contributions! 🚀\n-\n-[^1]: <https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811#the-compilation-pipeline-7> \"The compilation pipeline\".\n-[^2]: <https://github.com/paritytech/polkadot-sdk/tree/master/substrate/bin/utils/chain-spec-builder> \"chain-spec-builder\"."
        }
      ],
      "additions": 0,
      "deletions": 9,
      "total_changes": 9,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "a65a24bf0165dba101377ab1b2c2a8514daaa772",
      "message": "Merge pull request #13 from QuantumFusion-network/andor0/update-examples\n\nUpdate examples",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-16T18:18:49+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/a65a24bf0165dba101377ab1b2c2a8514daaa772",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build  \\\n+    cargo +nightly build \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 38,
          "deletions": 26,
          "changes": 64,
          "status": "modified",
          "patch": "@@ -74,21 +74,27 @@ fn call_transfer() -> u64 {\n }\n \n fn call_inc() -> u64 {\n+    // string representation of the key used to store the counter value\n     // \"                                                                                                                                                                                                                                                             foo\"\n+\n+    // hex representation of the key used to store the counter value\n     // \"0xn-    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+\n+    // binary representation of the key used to store the counter value\n+    let storage_key: [u8; 256] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     let mut buffer = [0u8; 2048];\n@@ -123,21 +129,27 @@ fn call_inc() -> u64 {\n }\n \n fn call_delete() -> u64 {\n+    // string representation of the key used to store the counter value\n     // \"                                                                                                                                                                                                                                                             foo\"\n+\n+    // hex representation of the key used to store the counter value\n     // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+\n+    // binary representation of the key used to store the counter value\n+    let storage_key: [u8; 256] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     unsafe {"
        }
      ],
      "additions": 39,
      "deletions": 27,
      "total_changes": 66,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "d5f1d992fe721e8599b9a44d8fa0996d0202b794",
      "message": "cargo fmt",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-16T18:14:16+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/d5f1d992fe721e8599b9a44d8fa0996d0202b794",
      "files_changed": [
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 28,
          "deletions": 26,
          "changes": 54,
          "status": "modified",
          "patch": "@@ -81,19 +81,20 @@ fn call_inc() -> u64 {\n     // \"0xn \n     // binary representation of the key used to store the counter value\n-    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key: [u8; 256] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     let mut buffer = [0u8; 2048];\n@@ -135,19 +136,20 @@ fn call_delete() -> u64 {\n     // \"0xn \n     // binary representation of the key used to store the counter value\n-    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key: [u8; 256] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     unsafe {"
        }
      ],
      "additions": 28,
      "deletions": 26,
      "total_changes": 54,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "7b310798c22d490df09719c22fa232feecd3db05",
      "message": "Merge pull request #12 from QuantumFusion-network/revert-11-zotho/issue-328\n\nRevert \"Add more smart contract examples\"",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-16T17:24:23+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/7b310798c22d490df09719c22fa232feecd3db05",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n+    cargo +nightly build  \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "build_polkavm.sh",
          "additions": 0,
          "deletions": 34,
          "changes": 34,
          "status": "removed",
          "patch": "@@ -1,34 +0,0 @@\n-#!/bin/bash\n-\n-# Check if a crate name was provided\n-if [ $# -eq 0 ]; then\n-    echo \"Error: No crate name provided.\"\n-    echo \"Usage: $0 <crate_name>\"\n-    echo \"Crates: hello-qf-polkavm get-account-balance get-block-number get-contract-balance increment-counter\"\n-    exit 1\n-fi\n-\n-# Set the crate name from the first argument\n-CRATE_NAME=$1\n-\n-# Create output directory if it doesn't exist\n-mkdir -p output\n-\n-# Build and link the crate\n-pushd \"examples/${CRATE_NAME}\" > /dev/null\n-\n-echo \"Building ${CRATE_NAME}\"\n-\n-RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n-        -Z build-std=core,alloc \\\n-        --target $(polkatool get-target-json-path --bitness 32) \\\n-        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n-popd > /dev/null\n-\n-polkatool link \\\n-    --run-only-if-newer \\\n-    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n-    -o \"output/${CRATE_NAME}.polkavm\"\n-\n-echo \"Successfully built and linked ${CRATE_NAME} to output/${CRATE_NAME}.polkavm\""
        },
        {
          "filename": "examples/get-account-balance/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-account-balance/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-account-balance\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-account-balance/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-account-balance\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-account-balance/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_balance_of()\n-}\n-\n-fn call_balance_of() -> u64 {\n-    unsafe { balance_of() }\n-}"
        },
        {
          "filename": "examples/get-block-number/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-block-number/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-block-number\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-block-number/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-block-number\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-block-number/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_block_number()\n-}\n-\n-fn call_block_number() -> u64 {\n-    unsafe { block_number() }\n-}"
        },
        {
          "filename": "examples/get-contract-balance/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-contract-balance\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-contract-balance/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-contract-balance\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-contract-balance/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_balance()\n-}\n-\n-fn call_balance() -> u64 {\n-    unsafe { balance() }\n-}"
        },
        {
          "filename": "examples/increment-counter/Cargo.lock",
          "additions": 0,
          "deletions": 229,
          "changes": 229,
          "status": "removed",
          "patch": "@@ -1,229 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.7.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n-\n-[[package]]\n-name = \"byte-slice-cast\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n-\n-[[package]]\n-name = \"const_format\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n-dependencies = [\n- \"const_format_proc_macros\",\n-]\n-\n-[[package]]\n-name = \"const_format_proc_macros\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"equivalent\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n-\n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n-[[package]]\n-name = \"impl-trait-for-tuples\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"increment-counter\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"parity-scale-codec\",\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"indexmap\"\n-version = \"2.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n-dependencies = [\n- \"equivalent\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"memchr\"\n-version = \"2.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n-\n-[[package]]\n-name = \"parity-scale-codec\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n-dependencies = [\n- \"arrayvec\",\n- \"byte-slice-cast\",\n- \"const_format\",\n- \"impl-trait-for-tuples\",\n- \"parity-scale-codec-derive\",\n- \"rustversion\",\n-]\n-\n-[[package]]\n-name = \"parity-scale-codec-derive\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n-dependencies = [\n- \"proc-macro-crate\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro-crate\"\n-version = \"3.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n-dependencies = [\n- \"toml_edit\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"toml_datetime\"\n-version = \"0.6.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n-\n-[[package]]\n-name = \"toml_edit\"\n-version = \"0.22.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n-dependencies = [\n- \"indexmap\",\n- \"toml_datetime\",\n- \"winnow\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n-\n-[[package]]\n-name = \"winnow\"\n-version = \"0.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n-dependencies = [\n- \"memchr\",\n-]"
        },
        {
          "filename": "examples/increment-counter/Cargo.toml",
          "additions": 0,
          "deletions": 10,
          "changes": 10,
          "status": "removed",
          "patch": "@@ -1,10 +0,0 @@\n-[package]\n-name = \"increment-counter\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/increment-counter/src/main.rs",
          "additions": 0,
          "deletions": 73,
          "changes": 73,
          "status": "removed",
          "patch": "@@ -1,73 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-use parity_scale_codec::{Decode, Encode};\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[derive(Encode, Decode, Default)]\n-struct Counter {\n-    counter: u32,\n-}\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    let mut buffer = [0u8; 64];\n-    if let Err(err) = get_input_data(&mut buffer) {\n-        return err;\n-    }\n-\n-    let increment = u32::from_be_bytes(buffer[..4].try_into().unwrap());\n-\n-    call_increment(increment)\n-}\n-\n-fn get_input_data(buffer: &mut [u8; 64]) -> Result<(), u64> {\n-    let pointer: *mut [u8; 64] = buffer;\n-\n-    match unsafe { get_user_data(pointer as u32) } {\n-        0 => Ok(()),\n-        err => Err(err),\n-    }\n-}\n-\n-fn call_increment(increment: u32) -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n-\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n-\n-    unsafe {\n-        match get(storage_key_pointer as u32, pointer as u32) {\n-            0 => (),\n-            other => return other,\n-        }\n-\n-        let mut tmp: &[u8] = &buffer;\n-        let mut counter = if buffer == [0u8; 64] {\n-            Counter::default()\n-        } else {\n-            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n-        };\n-\n-        counter.counter = counter.counter.saturating_add(increment);\n-\n-        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n-            buffer[pos] = *elem\n-        }\n-\n-        match set(storage_key_pointer as u32, pointer as u32) {\n-            0 => (),\n-            other => return other,\n-        }\n-    }\n-\n-    0\n-}"
        },
        {
          "filename": "upload_and_execute.js",
          "additions": 0,
          "deletions": 144,
          "changes": 144,
          "status": "removed",
          "patch": "@@ -1,144 +0,0 @@\n-// Script to call the 'upload' and 'execute' extrinsics from the qfPolkaVm pallet\n-// and handle events\n-\n-// Use ALICE as the transaction sender\n-const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n-\n-// Prepare program data for upload\n-// 'get-account-balance.polkavm'\n-// python3 -c \"print(', '.join(f'0x{b:02X}' for b in open('output/get-account-balance.polkavm', 'rb').read()))\"\n-const programData = new Uint8Array([\n-  0x50, 0x56, 0x4D, 0x00, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0xA0, 0x00, 0x04, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x5F, 0x6F, 0x66, 0x05, 0x07, 0x01, 0x00, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x06, 0x12, 0x00, 0x00, 0x0D, 0x83, 0x11, 0xFC, 0x7A, 0x10, 0x0A, 0x81, 0x10, 0x83, 0x11, 0x04, 0x32, 0x00, 0x69, 0x09, 0x00\n-]);\n-\n-// Extrinsic execute parameters\n-const to = ALICE;\n-const value = 0;\n-const userData = '0x00';\n-const gasLimit = 100;\n-const gasPrice = 10;\n-\n-console.log(`Prepared program blob of size ${programData.length} bytes`);\n-\n-function buf2hex(buffer) { // buffer is an ArrayBuffer\n-  return [...new Uint8Array(buffer)]\n-    .map(x => x.toString(16).padStart(2, '0'))\n-    .join('');\n-}\n-\n-// Create the 'upload' extrinsic from the qfPolkaVm pallet with the programBlob argument\n-const uploadExtrinsic = api.tx.qfPolkaVM.upload('0x' + buf2hex(programData));\n-console.log(`Extrinsic created: ${uploadExtrinsic.method.section}.${uploadExtrinsic.method.method}`);\n-\n-// Sign and send the transaction\n-const contractAddressPromise = new Promise(async (resolve) => {\n-  const unsubscribeUploadExtrinsic = await uploadExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n-    // Track the transaction status\n-    if (status.isInBlock) {\n-      console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n-    } else if (status.isFinalized) {\n-      console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n-    } else {\n-      console.log(`Transaction status: ${status.type}`);\n-    }\n-\n-    // Handle events\n-    events.forEach(({ phase, event: { data, method, section } }) => {\n-      // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n-      \n-      // Specifically handle the ProgramBlobUploaded event\n-      if (section === 'qfPolkaVM' && method === 'ProgramBlobUploaded') {\n-        const contractAddress = data[1].toString();\n-        console.log(`\\nProgram uploaded successfully!`);\n-        console.log(`Contract address: ${contractAddress}`);\n-        \n-        // Additional logic for working with the contract can be added here\n-        unsubscribeUploadExtrinsic();\n-        resolve(contractAddress);\n-      }\n-    });\n-    \n-    // Check for errors\n-    const errorEvent = events.find(({ event }) => \n-      api.events.system.ExtrinsicFailed.is(event)\n-    );\n-    \n-    if (errorEvent) {\n-      // Extract error information\n-      const { event: { data: [error] } } = errorEvent;\n-      \n-      if (error.isModule) {\n-        // For module errors, decode it\n-        const decoded = api.registry.findMetaError(error.asModule);\n-        const { docs, method, section } = decoded;\n-        \n-        console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n-      } else {\n-        // Other errors\n-        console.log(`\\nError: ${error.toString()}`);\n-      }\n-    }\n-  });\n-});\n-\n-console.log('Transaction sent. Waiting for processing...');\n-\n-const contractAddress = await contractAddressPromise;\n-\n-const executeExtrinsic = api.tx.qfPolkaVM.execute(contractAddress, to, value, userData, gasLimit, gasPrice);\n-console.log(`\\nExtrinsic created: ${executeExtrinsic.method.section}.${executeExtrinsic.method.method}`);\n-\n-const unsubscribeExecuteExtrinsic = await executeExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n-  // Track transaction status\n-  if (status.isInBlock) {\n-    console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n-  } else if (status.isFinalized) {\n-    console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n-  } else {\n-    console.log(`Transaction status: ${status.type}`);\n-  }\n-\n-  // Handle events\n-  events.forEach(({ phase, event: { data, method, section } }) => {\n-    // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n-\n-    if (section === 'qfPolkaVM' && method === 'ExecutionResult') {\n-      const [_who, _contractAddress, result, notEnoughGas, trap, gasBefore, gasAfter] = data;\n-      console.log(`\\nProgram executed successfully!`);\n-      \n-      console.log(JSON.stringify({\n-        result: api.createType('Option<u64>', result).toHuman(),\n-        notEnoughGas,\n-        trap,\n-        gasBefore: api.createType('u32', gasBefore).toHuman(),\n-        gasAfter: api.createType('i64', gasAfter).toHuman(),\n-      }, null, 2));\n-      \n-      // Additional logic for working with the contract can be added here\n-      unsubscribeExecuteExtrinsic();\n-    }\n-  });\n-  \n-  // Check for errors\n-  const errorEvent = events.find(({ event }) => \n-    api.events.system.ExtrinsicFailed.is(event)\n-  );\n-  \n-  if (errorEvent) {\n-    // Extract error information\n-    const { event: { data: [error] } } = errorEvent;\n-    \n-    if (error.isModule) {\n-      // For module errors, decode it\n-      const decoded = api.registry.findMetaError(error.asModule);\n-      const { docs, method, section } = decoded;\n-      \n-      console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n-    } else {\n-      // Other errors\n-      console.log(`\\nError: ${error.toString()}`);\n-    }\n-  }\n-});\n-\n-console.log('Transaction sent. Waiting for processing...');"
        }
      ],
      "additions": 1,
      "deletions": 812,
      "total_changes": 813,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "86fd2ae0de63324b0e47be2d047f420fd1145f27",
      "message": "Update examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-16T17:16:53+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/86fd2ae0de63324b0e47be2d047f420fd1145f27",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build  \\\n+    cargo +nightly build \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 10,
          "deletions": 0,
          "changes": 10,
          "status": "modified",
          "patch": "@@ -74,8 +74,13 @@ fn call_transfer() -> u64 {\n }\n \n fn call_inc() -> u64 {\n+    // string representation of the key used to store the counter value\n     // \"                                                                                                                                                                                                                                                             foo\"\n+\n+    // hex representation of the key used to store the counter value\n     // \"0xn+\n+    // binary representation of the key used to store the counter value\n     let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n     32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n     32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n@@ -123,8 +128,13 @@ fn call_inc() -> u64 {\n }\n \n fn call_delete() -> u64 {\n+    // string representation of the key used to store the counter value\n     // \"                                                                                                                                                                                                                                                             foo\"\n+\n+    // hex representation of the key used to store the counter value\n     // \"0xn+\n+    // binary representation of the key used to store the counter value\n     let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n     32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n     32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,"
        }
      ],
      "additions": 11,
      "deletions": 1,
      "total_changes": 12,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "2f108aac840466b02e55ad5cecf04a2ac6829278",
      "message": "Revert \"Add more smart contract examples\"",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-16T17:11:44+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/2f108aac840466b02e55ad5cecf04a2ac6829278",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n+    cargo +nightly build  \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "build_polkavm.sh",
          "additions": 0,
          "deletions": 34,
          "changes": 34,
          "status": "removed",
          "patch": "@@ -1,34 +0,0 @@\n-#!/bin/bash\n-\n-# Check if a crate name was provided\n-if [ $# -eq 0 ]; then\n-    echo \"Error: No crate name provided.\"\n-    echo \"Usage: $0 <crate_name>\"\n-    echo \"Crates: hello-qf-polkavm get-account-balance get-block-number get-contract-balance increment-counter\"\n-    exit 1\n-fi\n-\n-# Set the crate name from the first argument\n-CRATE_NAME=$1\n-\n-# Create output directory if it doesn't exist\n-mkdir -p output\n-\n-# Build and link the crate\n-pushd \"examples/${CRATE_NAME}\" > /dev/null\n-\n-echo \"Building ${CRATE_NAME}\"\n-\n-RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build \\\n-        -Z build-std=core,alloc \\\n-        --target $(polkatool get-target-json-path --bitness 32) \\\n-        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n-popd > /dev/null\n-\n-polkatool link \\\n-    --run-only-if-newer \\\n-    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n-    -o \"output/${CRATE_NAME}.polkavm\"\n-\n-echo \"Successfully built and linked ${CRATE_NAME} to output/${CRATE_NAME}.polkavm\""
        },
        {
          "filename": "examples/get-account-balance/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-account-balance/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-account-balance\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-account-balance/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-account-balance\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-account-balance/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_balance_of()\n-}\n-\n-fn call_balance_of() -> u64 {\n-    unsafe { balance_of() }\n-}"
        },
        {
          "filename": "examples/get-block-number/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-block-number/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-block-number\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-block-number/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-block-number\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-block-number/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_block_number()\n-}\n-\n-fn call_block_number() -> u64 {\n-    unsafe { block_number() }\n-}"
        },
        {
          "filename": "examples/get-contract-balance/.gitignore",
          "additions": 0,
          "deletions": 1,
          "changes": 1,
          "status": "removed",
          "patch": "@@ -1 +0,0 @@\n-target"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.lock",
          "additions": 0,
          "deletions": 84,
          "changes": 84,
          "status": "removed",
          "patch": "@@ -1,84 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"get-contract-balance\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-contract-balance/Cargo.toml",
          "additions": 0,
          "deletions": 9,
          "changes": 9,
          "status": "removed",
          "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"get-contract-balance\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-contract-balance/src/main.rs",
          "additions": 0,
          "deletions": 13,
          "changes": 13,
          "status": "removed",
          "patch": "@@ -1,13 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    call_balance()\n-}\n-\n-fn call_balance() -> u64 {\n-    unsafe { balance() }\n-}"
        },
        {
          "filename": "examples/increment-counter/Cargo.lock",
          "additions": 0,
          "deletions": 229,
          "changes": 229,
          "status": "removed",
          "patch": "@@ -1,229 +0,0 @@\n-# This file is automatically @generated by Cargo.\n-# It is not intended for manual editing.\n-version = 4\n-\n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.7.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n-\n-[[package]]\n-name = \"byte-slice-cast\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n-\n-[[package]]\n-name = \"const_format\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n-dependencies = [\n- \"const_format_proc_macros\",\n-]\n-\n-[[package]]\n-name = \"const_format_proc_macros\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"equivalent\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n-\n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n-[[package]]\n-name = \"impl-trait-for-tuples\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"increment-counter\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"parity-scale-codec\",\n- \"polkavm-derive\",\n- \"qf-polkavm-sdk\",\n-]\n-\n-[[package]]\n-name = \"indexmap\"\n-version = \"2.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n-dependencies = [\n- \"equivalent\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"memchr\"\n-version = \"2.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n-\n-[[package]]\n-name = \"parity-scale-codec\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n-dependencies = [\n- \"arrayvec\",\n- \"byte-slice-cast\",\n- \"const_format\",\n- \"impl-trait-for-tuples\",\n- \"parity-scale-codec-derive\",\n- \"rustversion\",\n-]\n-\n-[[package]]\n-name = \"parity-scale-codec-derive\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n-dependencies = [\n- \"proc-macro-crate\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-common\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-\n-[[package]]\n-name = \"polkavm-derive\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl-macro\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-common\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"polkavm-derive-impl-macro\"\n-version = \"0.21.0\"\n-source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n-dependencies = [\n- \"polkavm-derive-impl\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"proc-macro-crate\"\n-version = \"3.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n-dependencies = [\n- \"toml_edit\",\n-]\n-\n-[[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.94\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n-dependencies = [\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"qf-polkavm-sdk\"\n-version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n-\n-[[package]]\n-name = \"quote\"\n-version = \"1.0.40\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n-\n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n-\n-[[package]]\n-name = \"syn\"\n-version = \"2.0.100\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-ident\",\n-]\n-\n-[[package]]\n-name = \"toml_datetime\"\n-version = \"0.6.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n-\n-[[package]]\n-name = \"toml_edit\"\n-version = \"0.22.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n-dependencies = [\n- \"indexmap\",\n- \"toml_datetime\",\n- \"winnow\",\n-]\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n-\n-[[package]]\n-name = \"winnow\"\n-version = \"0.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n-dependencies = [\n- \"memchr\",\n-]"
        },
        {
          "filename": "examples/increment-counter/Cargo.toml",
          "additions": 0,
          "deletions": 10,
          "changes": 10,
          "status": "removed",
          "patch": "@@ -1,10 +0,0 @@\n-[package]\n-name = \"increment-counter\"\n-version = \"0.1.0\"\n-edition = \"2021\"\n-publish = false\n-\n-[dependencies]\n-parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n-polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/increment-counter/src/main.rs",
          "additions": 0,
          "deletions": 73,
          "changes": 73,
          "status": "removed",
          "patch": "@@ -1,73 +0,0 @@\n-#![no_std]\n-#![no_main]\n-\n-use parity_scale_codec::{Decode, Encode};\n-\n-qf_polkavm_sdk::host_functions!();\n-\n-#[derive(Encode, Decode, Default)]\n-struct Counter {\n-    counter: u32,\n-}\n-\n-#[polkavm_derive::polkavm_export]\n-extern \"C\" fn main() -> u64 {\n-    let mut buffer = [0u8; 64];\n-    if let Err(err) = get_input_data(&mut buffer) {\n-        return err;\n-    }\n-\n-    let increment = u32::from_be_bytes(buffer[..4].try_into().unwrap());\n-\n-    call_increment(increment)\n-}\n-\n-fn get_input_data(buffer: &mut [u8; 64]) -> Result<(), u64> {\n-    let pointer: *mut [u8; 64] = buffer;\n-\n-    match unsafe { get_user_data(pointer as u32) } {\n-        0 => Ok(()),\n-        err => Err(err),\n-    }\n-}\n-\n-fn call_increment(increment: u32) -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n-\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n-\n-    unsafe {\n-        match get(storage_key_pointer as u32, pointer as u32) {\n-            0 => (),\n-            other => return other,\n-        }\n-\n-        let mut tmp: &[u8] = &buffer;\n-        let mut counter = if buffer == [0u8; 64] {\n-            Counter::default()\n-        } else {\n-            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n-        };\n-\n-        counter.counter = counter.counter.saturating_add(increment);\n-\n-        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n-            buffer[pos] = *elem\n-        }\n-\n-        match set(storage_key_pointer as u32, pointer as u32) {\n-            0 => (),\n-            other => return other,\n-        }\n-    }\n-\n-    0\n-}"
        },
        {
          "filename": "upload_and_execute.js",
          "additions": 0,
          "deletions": 144,
          "changes": 144,
          "status": "removed",
          "patch": "@@ -1,144 +0,0 @@\n-// Script to call the 'upload' and 'execute' extrinsics from the qfPolkaVm pallet\n-// and handle events\n-\n-// Use ALICE as the transaction sender\n-const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n-\n-// Prepare program data for upload\n-// 'get-account-balance.polkavm'\n-// python3 -c \"print(', '.join(f'0x{b:02X}' for b in open('output/get-account-balance.polkavm', 'rb').read()))\"\n-const programData = new Uint8Array([\n-  0x50, 0x56, 0x4D, 0x00, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0xA0, 0x00, 0x04, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x5F, 0x6F, 0x66, 0x05, 0x07, 0x01, 0x00, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x06, 0x12, 0x00, 0x00, 0x0D, 0x83, 0x11, 0xFC, 0x7A, 0x10, 0x0A, 0x81, 0x10, 0x83, 0x11, 0x04, 0x32, 0x00, 0x69, 0x09, 0x00\n-]);\n-\n-// Extrinsic execute parameters\n-const to = ALICE;\n-const value = 0;\n-const userData = '0x00';\n-const gasLimit = 100;\n-const gasPrice = 10;\n-\n-console.log(`Prepared program blob of size ${programData.length} bytes`);\n-\n-function buf2hex(buffer) { // buffer is an ArrayBuffer\n-  return [...new Uint8Array(buffer)]\n-    .map(x => x.toString(16).padStart(2, '0'))\n-    .join('');\n-}\n-\n-// Create the 'upload' extrinsic from the qfPolkaVm pallet with the programBlob argument\n-const uploadExtrinsic = api.tx.qfPolkaVM.upload('0x' + buf2hex(programData));\n-console.log(`Extrinsic created: ${uploadExtrinsic.method.section}.${uploadExtrinsic.method.method}`);\n-\n-// Sign and send the transaction\n-const contractAddressPromise = new Promise(async (resolve) => {\n-  const unsubscribeUploadExtrinsic = await uploadExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n-    // Track the transaction status\n-    if (status.isInBlock) {\n-      console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n-    } else if (status.isFinalized) {\n-      console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n-    } else {\n-      console.log(`Transaction status: ${status.type}`);\n-    }\n-\n-    // Handle events\n-    events.forEach(({ phase, event: { data, method, section } }) => {\n-      // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n-      \n-      // Specifically handle the ProgramBlobUploaded event\n-      if (section === 'qfPolkaVM' && method === 'ProgramBlobUploaded') {\n-        const contractAddress = data[1].toString();\n-        console.log(`\\nProgram uploaded successfully!`);\n-        console.log(`Contract address: ${contractAddress}`);\n-        \n-        // Additional logic for working with the contract can be added here\n-        unsubscribeUploadExtrinsic();\n-        resolve(contractAddress);\n-      }\n-    });\n-    \n-    // Check for errors\n-    const errorEvent = events.find(({ event }) => \n-      api.events.system.ExtrinsicFailed.is(event)\n-    );\n-    \n-    if (errorEvent) {\n-      // Extract error information\n-      const { event: { data: [error] } } = errorEvent;\n-      \n-      if (error.isModule) {\n-        // For module errors, decode it\n-        const decoded = api.registry.findMetaError(error.asModule);\n-        const { docs, method, section } = decoded;\n-        \n-        console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n-      } else {\n-        // Other errors\n-        console.log(`\\nError: ${error.toString()}`);\n-      }\n-    }\n-  });\n-});\n-\n-console.log('Transaction sent. Waiting for processing...');\n-\n-const contractAddress = await contractAddressPromise;\n-\n-const executeExtrinsic = api.tx.qfPolkaVM.execute(contractAddress, to, value, userData, gasLimit, gasPrice);\n-console.log(`\\nExtrinsic created: ${executeExtrinsic.method.section}.${executeExtrinsic.method.method}`);\n-\n-const unsubscribeExecuteExtrinsic = await executeExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n-  // Track transaction status\n-  if (status.isInBlock) {\n-    console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n-  } else if (status.isFinalized) {\n-    console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n-  } else {\n-    console.log(`Transaction status: ${status.type}`);\n-  }\n-\n-  // Handle events\n-  events.forEach(({ phase, event: { data, method, section } }) => {\n-    // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n-\n-    if (section === 'qfPolkaVM' && method === 'ExecutionResult') {\n-      const [_who, _contractAddress, result, notEnoughGas, trap, gasBefore, gasAfter] = data;\n-      console.log(`\\nProgram executed successfully!`);\n-      \n-      console.log(JSON.stringify({\n-        result: api.createType('Option<u64>', result).toHuman(),\n-        notEnoughGas,\n-        trap,\n-        gasBefore: api.createType('u32', gasBefore).toHuman(),\n-        gasAfter: api.createType('i64', gasAfter).toHuman(),\n-      }, null, 2));\n-      \n-      // Additional logic for working with the contract can be added here\n-      unsubscribeExecuteExtrinsic();\n-    }\n-  });\n-  \n-  // Check for errors\n-  const errorEvent = events.find(({ event }) => \n-    api.events.system.ExtrinsicFailed.is(event)\n-  );\n-  \n-  if (errorEvent) {\n-    // Extract error information\n-    const { event: { data: [error] } } = errorEvent;\n-    \n-    if (error.isModule) {\n-      // For module errors, decode it\n-      const decoded = api.registry.findMetaError(error.asModule);\n-      const { docs, method, section } = decoded;\n-      \n-      console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n-    } else {\n-      // Other errors\n-      console.log(`\\nError: ${error.toString()}`);\n-    }\n-  }\n-});\n-\n-console.log('Transaction sent. Waiting for processing...');"
        }
      ],
      "additions": 1,
      "deletions": 812,
      "total_changes": 813,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "76075462fbf23e6228b4f510e00a626499c7d769",
      "message": "Merge pull request #11 from QuantumFusion-network/zotho/issue-328\n\nAdd more smart contract examples",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-16T16:41:15+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/76075462fbf23e6228b4f510e00a626499c7d769",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build  \\\n+    cargo +nightly build \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "build_polkavm.sh",
          "additions": 34,
          "deletions": 0,
          "changes": 34,
          "status": "added",
          "patch": "@@ -0,0 +1,34 @@\n+#!/bin/bash\n+\n+# Check if a crate name was provided\n+if [ $# -eq 0 ]; then\n+    echo \"Error: No crate name provided.\"\n+    echo \"Usage: $0 <crate_name>\"\n+    echo \"Crates: hello-qf-polkavm get-account-balance get-block-number get-contract-balance increment-counter\"\n+    exit 1\n+fi\n+\n+# Set the crate name from the first argument\n+CRATE_NAME=$1\n+\n+# Create output directory if it doesn't exist\n+mkdir -p output\n+\n+# Build and link the crate\n+pushd \"examples/${CRATE_NAME}\" > /dev/null\n+\n+echo \"Building ${CRATE_NAME}\"\n+\n+RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+    cargo +nightly build \\\n+        -Z build-std=core,alloc \\\n+        --target $(polkatool get-target-json-path --bitness 32) \\\n+        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+popd > /dev/null\n+\n+polkatool link \\\n+    --run-only-if-newer \\\n+    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+    -o \"output/${CRATE_NAME}.polkavm\"\n+\n+echo \"Successfully built and linked ${CRATE_NAME} to output/${CRATE_NAME}.polkavm\""
        },
        {
          "filename": "examples/get-account-balance/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-account-balance/Cargo.lock",
          "additions": 84,
          "deletions": 0,
          "changes": 84,
          "status": "added",
          "patch": "@@ -0,0 +1,84 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"get-account-balance\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-account-balance/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-account-balance\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-account-balance/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_balance_of()\n+}\n+\n+fn call_balance_of() -> u64 {\n+    unsafe { balance_of() }\n+}"
        },
        {
          "filename": "examples/get-block-number/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-block-number/Cargo.lock",
          "additions": 84,
          "deletions": 0,
          "changes": 84,
          "status": "added",
          "patch": "@@ -0,0 +1,84 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-block-number/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-block-number/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_block_number()\n+}\n+\n+fn call_block_number() -> u64 {\n+    unsafe { block_number() }\n+}"
        },
        {
          "filename": "examples/get-contract-balance/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.lock",
          "additions": 84,
          "deletions": 0,
          "changes": 84,
          "status": "added",
          "patch": "@@ -0,0 +1,84 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"get-contract-balance\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\""
        },
        {
          "filename": "examples/get-contract-balance/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-contract-balance\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-contract-balance/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_balance()\n+}\n+\n+fn call_balance() -> u64 {\n+    unsafe { balance() }\n+}"
        },
        {
          "filename": "examples/increment-counter/Cargo.lock",
          "additions": 229,
          "deletions": 0,
          "changes": 229,
          "status": "added",
          "patch": "@@ -0,0 +1,229 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"increment-counter\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"parity-scale-codec\",\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/increment-counter/Cargo.toml",
          "additions": 10,
          "deletions": 0,
          "changes": 10,
          "status": "added",
          "patch": "@@ -0,0 +1,10 @@\n+[package]\n+name = \"increment-counter\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/increment-counter/src/main.rs",
          "additions": 73,
          "deletions": 0,
          "changes": 73,
          "status": "added",
          "patch": "@@ -0,0 +1,73 @@\n+#![no_std]\n+#![no_main]\n+\n+use parity_scale_codec::{Decode, Encode};\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[derive(Encode, Decode, Default)]\n+struct Counter {\n+    counter: u32,\n+}\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    let mut buffer = [0u8; 64];\n+    if let Err(err) = get_input_data(&mut buffer) {\n+        return err;\n+    }\n+\n+    let increment = u32::from_be_bytes(buffer[..4].try_into().unwrap());\n+\n+    call_increment(increment)\n+}\n+\n+fn get_input_data(buffer: &mut [u8; 64]) -> Result<(), u64> {\n+    let pointer: *mut [u8; 64] = buffer;\n+\n+    match unsafe { get_user_data(pointer as u32) } {\n+        0 => Ok(()),\n+        err => Err(err),\n+    }\n+}\n+\n+fn call_increment(increment: u32) -> u64 {\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n+\n+    unsafe {\n+        match get(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+\n+        let mut tmp: &[u8] = &buffer;\n+        let mut counter = if buffer == [0u8; 64] {\n+            Counter::default()\n+        } else {\n+            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n+        };\n+\n+        counter.counter = counter.counter.saturating_add(increment);\n+\n+        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n+            buffer[pos] = *elem\n+        }\n+\n+        match set(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+    }\n+\n+    0\n+}"
        },
        {
          "filename": "upload_and_execute.js",
          "additions": 144,
          "deletions": 0,
          "changes": 144,
          "status": "added",
          "patch": "@@ -0,0 +1,144 @@\n+// Script to call the 'upload' and 'execute' extrinsics from the qfPolkaVm pallet\n+// and handle events\n+\n+// Use ALICE as the transaction sender\n+const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n+\n+// Prepare program data for upload\n+// 'get-account-balance.polkavm'\n+// python3 -c \"print(', '.join(f'0x{b:02X}' for b in open('output/get-account-balance.polkavm', 'rb').read()))\"\n+const programData = new Uint8Array([\n+  0x50, 0x56, 0x4D, 0x00, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0xA0, 0x00, 0x04, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x5F, 0x6F, 0x66, 0x05, 0x07, 0x01, 0x00, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x06, 0x12, 0x00, 0x00, 0x0D, 0x83, 0x11, 0xFC, 0x7A, 0x10, 0x0A, 0x81, 0x10, 0x83, 0x11, 0x04, 0x32, 0x00, 0x69, 0x09, 0x00\n+]);\n+\n+// Extrinsic execute parameters\n+const to = ALICE;\n+const value = 0;\n+const userData = '0x00';\n+const gasLimit = 100;\n+const gasPrice = 10;\n+\n+console.log(`Prepared program blob of size ${programData.length} bytes`);\n+\n+function buf2hex(buffer) { // buffer is an ArrayBuffer\n+  return [...new Uint8Array(buffer)]\n+    .map(x => x.toString(16).padStart(2, '0'))\n+    .join('');\n+}\n+\n+// Create the 'upload' extrinsic from the qfPolkaVm pallet with the programBlob argument\n+const uploadExtrinsic = api.tx.qfPolkaVM.upload('0x' + buf2hex(programData));\n+console.log(`Extrinsic created: ${uploadExtrinsic.method.section}.${uploadExtrinsic.method.method}`);\n+\n+// Sign and send the transaction\n+const contractAddressPromise = new Promise(async (resolve) => {\n+  const unsubscribeUploadExtrinsic = await uploadExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n+    // Track the transaction status\n+    if (status.isInBlock) {\n+      console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n+    } else if (status.isFinalized) {\n+      console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n+    } else {\n+      console.log(`Transaction status: ${status.type}`);\n+    }\n+\n+    // Handle events\n+    events.forEach(({ phase, event: { data, method, section } }) => {\n+      // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n+      \n+      // Specifically handle the ProgramBlobUploaded event\n+      if (section === 'qfPolkaVM' && method === 'ProgramBlobUploaded') {\n+        const contractAddress = data[1].toString();\n+        console.log(`\\nProgram uploaded successfully!`);\n+        console.log(`Contract address: ${contractAddress}`);\n+        \n+        // Additional logic for working with the contract can be added here\n+        unsubscribeUploadExtrinsic();\n+        resolve(contractAddress);\n+      }\n+    });\n+    \n+    // Check for errors\n+    const errorEvent = events.find(({ event }) => \n+      api.events.system.ExtrinsicFailed.is(event)\n+    );\n+    \n+    if (errorEvent) {\n+      // Extract error information\n+      const { event: { data: [error] } } = errorEvent;\n+      \n+      if (error.isModule) {\n+        // For module errors, decode it\n+        const decoded = api.registry.findMetaError(error.asModule);\n+        const { docs, method, section } = decoded;\n+        \n+        console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n+      } else {\n+        // Other errors\n+        console.log(`\\nError: ${error.toString()}`);\n+      }\n+    }\n+  });\n+});\n+\n+console.log('Transaction sent. Waiting for processing...');\n+\n+const contractAddress = await contractAddressPromise;\n+\n+const executeExtrinsic = api.tx.qfPolkaVM.execute(contractAddress, to, value, userData, gasLimit, gasPrice);\n+console.log(`\\nExtrinsic created: ${executeExtrinsic.method.section}.${executeExtrinsic.method.method}`);\n+\n+const unsubscribeExecuteExtrinsic = await executeExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n+  // Track transaction status\n+  if (status.isInBlock) {\n+    console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n+  } else if (status.isFinalized) {\n+    console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n+  } else {\n+    console.log(`Transaction status: ${status.type}`);\n+  }\n+\n+  // Handle events\n+  events.forEach(({ phase, event: { data, method, section } }) => {\n+    // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n+\n+    if (section === 'qfPolkaVM' && method === 'ExecutionResult') {\n+      const [_who, _contractAddress, result, notEnoughGas, trap, gasBefore, gasAfter] = data;\n+      console.log(`\\nProgram executed successfully!`);\n+      \n+      console.log(JSON.stringify({\n+        result: api.createType('Option<u64>', result).toHuman(),\n+        notEnoughGas,\n+        trap,\n+        gasBefore: api.createType('u32', gasBefore).toHuman(),\n+        gasAfter: api.createType('i64', gasAfter).toHuman(),\n+      }, null, 2));\n+      \n+      // Additional logic for working with the contract can be added here\n+      unsubscribeExecuteExtrinsic();\n+    }\n+  });\n+  \n+  // Check for errors\n+  const errorEvent = events.find(({ event }) => \n+    api.events.system.ExtrinsicFailed.is(event)\n+  );\n+  \n+  if (errorEvent) {\n+    // Extract error information\n+    const { event: { data: [error] } } = errorEvent;\n+    \n+    if (error.isModule) {\n+      // For module errors, decode it\n+      const decoded = api.registry.findMetaError(error.asModule);\n+      const { docs, method, section } = decoded;\n+      \n+      console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n+    } else {\n+      // Other errors\n+      console.log(`\\nError: ${error.toString()}`);\n+    }\n+  }\n+});\n+\n+console.log('Transaction sent. Waiting for processing...');"
        }
      ],
      "additions": 812,
      "deletions": 1,
      "total_changes": 813,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "d6d50e09035b1c32771bade024bd25741d10b4be",
      "message": "Add build and run scripts",
      "author": {
        "name": "Alekseev Svyatoslav",
        "email": "sviatoslav.alekseev@proton.me",
        "username": "zotho",
        "avatar_url": "https://avatars.githubusercontent.com/u/22890821?v=4"
      },
      "committer": {
        "name": "Alekseev Svyatoslav",
        "email": "sviatoslav.alekseev@proton.me",
        "username": "zotho",
        "avatar_url": "https://avatars.githubusercontent.com/u/22890821?v=4"
      },
      "timestamp": "2025-05-16T15:23:42+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/d6d50e09035b1c32771bade024bd25741d10b4be",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -48,7 +48,7 @@ mkdir -p output\n \n pushd \"examples/${CRATE_NAME}\"\n RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n-    cargo +nightly build  \\\n+    cargo +nightly build \\\n         -Z build-std=core,alloc \\\n         --target $(polkatool get-target-json-path --bitness 32) \\\n         -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\""
        },
        {
          "filename": "build_polkavm.sh",
          "additions": 34,
          "deletions": 0,
          "changes": 34,
          "status": "added",
          "patch": "@@ -0,0 +1,34 @@\n+#!/bin/bash\n+\n+# Check if a crate name was provided\n+if [ $# -eq 0 ]; then\n+    echo \"Error: No crate name provided.\"\n+    echo \"Usage: $0 <crate_name>\"\n+    echo \"Crates: hello-qf-polkavm get-account-balance get-block-number get-contract-balance increment-counter\"\n+    exit 1\n+fi\n+\n+# Set the crate name from the first argument\n+CRATE_NAME=$1\n+\n+# Create output directory if it doesn't exist\n+mkdir -p output\n+\n+# Build and link the crate\n+pushd \"examples/${CRATE_NAME}\" > /dev/null\n+\n+echo \"Building ${CRATE_NAME}\"\n+\n+RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+    cargo +nightly build \\\n+        -Z build-std=core,alloc \\\n+        --target $(polkatool get-target-json-path --bitness 32) \\\n+        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+popd > /dev/null\n+\n+polkatool link \\\n+    --run-only-if-newer \\\n+    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+    -o \"output/${CRATE_NAME}.polkavm\"\n+\n+echo \"Successfully built and linked ${CRATE_NAME} to output/${CRATE_NAME}.polkavm\""
        },
        {
          "filename": "examples/get-account-balance/Cargo.lock",
          "additions": 1,
          "deletions": 146,
          "changes": 147,
          "status": "modified",
          "patch": "@@ -3,111 +3,13 @@\n version = 4\n \n [[package]]\n-name = \"arrayvec\"\n-version = \"0.7.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n-\n-[[package]]\n-name = \"byte-slice-cast\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n-\n-[[package]]\n-name = \"const_format\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n-dependencies = [\n- \"const_format_proc_macros\",\n-]\n-\n-[[package]]\n-name = \"const_format_proc_macros\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"equivalent\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n-\n-[[package]]\n-name = \"get-block-number\"\n+name = \"get-account-balance\"\n version = \"0.1.0\"\n dependencies = [\n- \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n-[[package]]\n-name = \"impl-trait-for-tuples\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"indexmap\"\n-version = \"2.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n-dependencies = [\n- \"equivalent\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"memchr\"\n-version = \"2.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n-\n-[[package]]\n-name = \"parity-scale-codec\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n-dependencies = [\n- \"arrayvec\",\n- \"byte-slice-cast\",\n- \"const_format\",\n- \"impl-trait-for-tuples\",\n- \"parity-scale-codec-derive\",\n- \"rustversion\",\n-]\n-\n-[[package]]\n-name = \"parity-scale-codec-derive\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n-dependencies = [\n- \"proc-macro-crate\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"polkavm-common\"\n version = \"0.21.0\"\n@@ -141,15 +43,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"proc-macro-crate\"\n-version = \"3.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n-dependencies = [\n- \"toml_edit\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.94\"\n@@ -173,12 +66,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n-\n [[package]]\n name = \"syn\"\n version = \"2.0.100\"\n@@ -190,40 +77,8 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n-[[package]]\n-name = \"toml_datetime\"\n-version = \"0.6.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n-\n-[[package]]\n-name = \"toml_edit\"\n-version = \"0.22.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n-dependencies = [\n- \"indexmap\",\n- \"toml_datetime\",\n- \"winnow\",\n-]\n-\n [[package]]\n name = \"unicode-ident\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n-\n-[[package]]\n-name = \"winnow\"\n-version = \"0.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n-dependencies = [\n- \"memchr\",\n-]"
        },
        {
          "filename": "examples/get-block-number/Cargo.lock",
          "additions": 0,
          "deletions": 145,
          "changes": 145,
          "status": "modified",
          "patch": "@@ -2,112 +2,14 @@\n # It is not intended for manual editing.\n version = 4\n \n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.7.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n-\n-[[package]]\n-name = \"byte-slice-cast\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n-\n-[[package]]\n-name = \"const_format\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n-dependencies = [\n- \"const_format_proc_macros\",\n-]\n-\n-[[package]]\n-name = \"const_format_proc_macros\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"equivalent\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n-\n [[package]]\n name = \"get-block-number\"\n version = \"0.1.0\"\n dependencies = [\n- \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n-[[package]]\n-name = \"impl-trait-for-tuples\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"indexmap\"\n-version = \"2.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n-dependencies = [\n- \"equivalent\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"memchr\"\n-version = \"2.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n-\n-[[package]]\n-name = \"parity-scale-codec\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n-dependencies = [\n- \"arrayvec\",\n- \"byte-slice-cast\",\n- \"const_format\",\n- \"impl-trait-for-tuples\",\n- \"parity-scale-codec-derive\",\n- \"rustversion\",\n-]\n-\n-[[package]]\n-name = \"parity-scale-codec-derive\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n-dependencies = [\n- \"proc-macro-crate\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"polkavm-common\"\n version = \"0.21.0\"\n@@ -141,15 +43,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"proc-macro-crate\"\n-version = \"3.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n-dependencies = [\n- \"toml_edit\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.94\"\n@@ -173,12 +66,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n-\n [[package]]\n name = \"syn\"\n version = \"2.0.100\"\n@@ -190,40 +77,8 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n-[[package]]\n-name = \"toml_datetime\"\n-version = \"0.6.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n-\n-[[package]]\n-name = \"toml_edit\"\n-version = \"0.22.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n-dependencies = [\n- \"indexmap\",\n- \"toml_datetime\",\n- \"winnow\",\n-]\n-\n [[package]]\n name = \"unicode-ident\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n-\n-[[package]]\n-name = \"winnow\"\n-version = \"0.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n-dependencies = [\n- \"memchr\",\n-]"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.lock",
          "additions": 1,
          "deletions": 146,
          "changes": 147,
          "status": "modified",
          "patch": "@@ -3,111 +3,13 @@\n version = 4\n \n [[package]]\n-name = \"arrayvec\"\n-version = \"0.7.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n-\n-[[package]]\n-name = \"byte-slice-cast\"\n-version = \"1.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n-\n-[[package]]\n-name = \"const_format\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n-dependencies = [\n- \"const_format_proc_macros\",\n-]\n-\n-[[package]]\n-name = \"const_format_proc_macros\"\n-version = \"0.2.34\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"equivalent\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n-\n-[[package]]\n-name = \"get-block-number\"\n+name = \"get-contract-balance\"\n version = \"0.1.0\"\n dependencies = [\n- \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n-[[package]]\n-name = \"impl-trait-for-tuples\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"indexmap\"\n-version = \"2.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n-dependencies = [\n- \"equivalent\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"memchr\"\n-version = \"2.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n-\n-[[package]]\n-name = \"parity-scale-codec\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n-dependencies = [\n- \"arrayvec\",\n- \"byte-slice-cast\",\n- \"const_format\",\n- \"impl-trait-for-tuples\",\n- \"parity-scale-codec-derive\",\n- \"rustversion\",\n-]\n-\n-[[package]]\n-name = \"parity-scale-codec-derive\"\n-version = \"3.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n-dependencies = [\n- \"proc-macro-crate\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"polkavm-common\"\n version = \"0.21.0\"\n@@ -141,15 +43,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"proc-macro-crate\"\n-version = \"3.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n-dependencies = [\n- \"toml_edit\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.94\"\n@@ -173,12 +66,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.20\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n-\n [[package]]\n name = \"syn\"\n version = \"2.0.100\"\n@@ -190,40 +77,8 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n-[[package]]\n-name = \"toml_datetime\"\n-version = \"0.6.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n-\n-[[package]]\n-name = \"toml_edit\"\n-version = \"0.22.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n-dependencies = [\n- \"indexmap\",\n- \"toml_datetime\",\n- \"winnow\",\n-]\n-\n [[package]]\n name = \"unicode-ident\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n-\n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n-\n-[[package]]\n-name = \"winnow\"\n-version = \"0.7.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n-dependencies = [\n- \"memchr\",\n-]"
        },
        {
          "filename": "upload_and_execute.js",
          "additions": 144,
          "deletions": 0,
          "changes": 144,
          "status": "added",
          "patch": "@@ -0,0 +1,144 @@\n+// Script to call the 'upload' and 'execute' extrinsics from the qfPolkaVm pallet\n+// and handle events\n+\n+// Use ALICE as the transaction sender\n+const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';\n+\n+// Prepare program data for upload\n+// 'get-account-balance.polkavm'\n+// python3 -c \"print(', '.join(f'0x{b:02X}' for b in open('output/get-account-balance.polkavm', 'rb').read()))\"\n+const programData = new Uint8Array([\n+  0x50, 0x56, 0x4D, 0x00, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0xA0, 0x00, 0x04, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x5F, 0x6F, 0x66, 0x05, 0x07, 0x01, 0x00, 0x04, 0x6D, 0x61, 0x69, 0x6E, 0x06, 0x12, 0x00, 0x00, 0x0D, 0x83, 0x11, 0xFC, 0x7A, 0x10, 0x0A, 0x81, 0x10, 0x83, 0x11, 0x04, 0x32, 0x00, 0x69, 0x09, 0x00\n+]);\n+\n+// Extrinsic execute parameters\n+const to = ALICE;\n+const value = 0;\n+const userData = '0x00';\n+const gasLimit = 100;\n+const gasPrice = 10;\n+\n+console.log(`Prepared program blob of size ${programData.length} bytes`);\n+\n+function buf2hex(buffer) { // buffer is an ArrayBuffer\n+  return [...new Uint8Array(buffer)]\n+    .map(x => x.toString(16).padStart(2, '0'))\n+    .join('');\n+}\n+\n+// Create the 'upload' extrinsic from the qfPolkaVm pallet with the programBlob argument\n+const uploadExtrinsic = api.tx.qfPolkaVM.upload('0x' + buf2hex(programData));\n+console.log(`Extrinsic created: ${uploadExtrinsic.method.section}.${uploadExtrinsic.method.method}`);\n+\n+// Sign and send the transaction\n+const contractAddressPromise = new Promise(async (resolve) => {\n+  const unsubscribeUploadExtrinsic = await uploadExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n+    // Track the transaction status\n+    if (status.isInBlock) {\n+      console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n+    } else if (status.isFinalized) {\n+      console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n+    } else {\n+      console.log(`Transaction status: ${status.type}`);\n+    }\n+\n+    // Handle events\n+    events.forEach(({ phase, event: { data, method, section } }) => {\n+      // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n+      \n+      // Specifically handle the ProgramBlobUploaded event\n+      if (section === 'qfPolkaVM' && method === 'ProgramBlobUploaded') {\n+        const contractAddress = data[1].toString();\n+        console.log(`\\nProgram uploaded successfully!`);\n+        console.log(`Contract address: ${contractAddress}`);\n+        \n+        // Additional logic for working with the contract can be added here\n+        unsubscribeUploadExtrinsic();\n+        resolve(contractAddress);\n+      }\n+    });\n+    \n+    // Check for errors\n+    const errorEvent = events.find(({ event }) => \n+      api.events.system.ExtrinsicFailed.is(event)\n+    );\n+    \n+    if (errorEvent) {\n+      // Extract error information\n+      const { event: { data: [error] } } = errorEvent;\n+      \n+      if (error.isModule) {\n+        // For module errors, decode it\n+        const decoded = api.registry.findMetaError(error.asModule);\n+        const { docs, method, section } = decoded;\n+        \n+        console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n+      } else {\n+        // Other errors\n+        console.log(`\\nError: ${error.toString()}`);\n+      }\n+    }\n+  });\n+});\n+\n+console.log('Transaction sent. Waiting for processing...');\n+\n+const contractAddress = await contractAddressPromise;\n+\n+const executeExtrinsic = api.tx.qfPolkaVM.execute(contractAddress, to, value, userData, gasLimit, gasPrice);\n+console.log(`\\nExtrinsic created: ${executeExtrinsic.method.section}.${executeExtrinsic.method.method}`);\n+\n+const unsubscribeExecuteExtrinsic = await executeExtrinsic.signAndSend(ALICE, ({ events = [], status }) => {\n+  // Track transaction status\n+  if (status.isInBlock) {\n+    console.log(`Transaction included in block with hash: ${status.asInBlock.toHex()}`);\n+  } else if (status.isFinalized) {\n+    console.log(`Transaction finalized in block with hash: ${status.asFinalized.toHex()}`);\n+  } else {\n+    console.log(`Transaction status: ${status.type}`);\n+  }\n+\n+  // Handle events\n+  events.forEach(({ phase, event: { data, method, section } }) => {\n+    // console.log(`${phase.toString()} : ${section}.${method} ${data.toString()}`);\n+\n+    if (section === 'qfPolkaVM' && method === 'ExecutionResult') {\n+      const [_who, _contractAddress, result, notEnoughGas, trap, gasBefore, gasAfter] = data;\n+      console.log(`\\nProgram executed successfully!`);\n+      \n+      console.log(JSON.stringify({\n+        result: api.createType('Option<u64>', result).toHuman(),\n+        notEnoughGas,\n+        trap,\n+        gasBefore: api.createType('u32', gasBefore).toHuman(),\n+        gasAfter: api.createType('i64', gasAfter).toHuman(),\n+      }, null, 2));\n+      \n+      // Additional logic for working with the contract can be added here\n+      unsubscribeExecuteExtrinsic();\n+    }\n+  });\n+  \n+  // Check for errors\n+  const errorEvent = events.find(({ event }) => \n+    api.events.system.ExtrinsicFailed.is(event)\n+  );\n+  \n+  if (errorEvent) {\n+    // Extract error information\n+    const { event: { data: [error] } } = errorEvent;\n+    \n+    if (error.isModule) {\n+      // For module errors, decode it\n+      const decoded = api.registry.findMetaError(error.asModule);\n+      const { docs, method, section } = decoded;\n+      \n+      console.log(`\\nError: ${section}.${method}: ${docs.join(' ')}`);\n+    } else {\n+      // Other errors\n+      console.log(`\\nError: ${error.toString()}`);\n+    }\n+  }\n+});\n+\n+console.log('Transaction sent. Waiting for processing...');"
        }
      ],
      "additions": 181,
      "deletions": 438,
      "total_changes": 619,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "ef01f0deeec7e41b7cbcbdc8e40760e2beeb62af",
      "message": "Merge pull request #10 from QuantumFusion-network/andor0/issue-336\n\nUpdate examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-16T12:13:46+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/ef01f0deeec7e41b7cbcbdc8e40760e2beeb62af",
      "files_changed": [
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 38,
          "deletions": 22,
          "changes": 60,
          "status": "modified",
          "patch": "@@ -23,8 +23,8 @@ struct Counter {\n \n #[polkavm_derive::polkavm_export]\n extern \"C\" fn main() -> u64 {\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n+    let mut buffer = [0u8; 2048];\n+    let pointer: *mut [u8; 2048] = &mut buffer;\n \n     let command: Command;\n \n@@ -74,17 +74,25 @@ fn call_transfer() -> u64 {\n }\n \n fn call_inc() -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n-\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n+    // \"                                                                                                                                                                                                                                                             foo\"\n+    // \"0xn+    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 256] = &storage_key;\n+\n+    let mut buffer = [0u8; 2048];\n+    let pointer: *mut [u8; 2048] = &mut buffer;\n \n     unsafe {\n         match get(storage_key_pointer as u32, pointer as u32) {\n@@ -93,7 +101,7 @@ fn call_inc() -> u64 {\n         }\n \n         let mut tmp: &[u8] = &buffer;\n-        let mut counter = if buffer == [0u8; 64] {\n+        let mut counter = if buffer == [0u8; 2048] {\n             Counter::default()\n         } else {\n             Counter::decode(&mut tmp).unwrap_or(Counter::default())\n@@ -115,14 +123,22 @@ fn call_inc() -> u64 {\n }\n \n fn call_delete() -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+    // \"                                                                                                                                                                                                                                                             foo\"\n+    // \"0xn+    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     unsafe {\n         let delete_result = delete(storage_key_pointer as u32);"
        }
      ],
      "additions": 38,
      "deletions": 22,
      "total_changes": 60,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "778fc98aedd67741073d6e85ad0a7ab102e585a9",
      "message": "Add more smart contract examples",
      "author": {
        "name": "Alekseev Svyatoslav",
        "email": "sviatoslav.alekseev@proton.me",
        "username": "zotho",
        "avatar_url": "https://avatars.githubusercontent.com/u/22890821?v=4"
      },
      "committer": {
        "name": "Alekseev Svyatoslav",
        "email": "sviatoslav.alekseev@proton.me",
        "username": "zotho",
        "avatar_url": "https://avatars.githubusercontent.com/u/22890821?v=4"
      },
      "timestamp": "2025-05-16T10:42:26+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/778fc98aedd67741073d6e85ad0a7ab102e585a9",
      "files_changed": [
        {
          "filename": "examples/get-account-balance/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-account-balance/Cargo.lock",
          "additions": 229,
          "deletions": 0,
          "changes": 229,
          "status": "added",
          "patch": "@@ -0,0 +1,229 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n+[[package]]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"parity-scale-codec\",\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/get-account-balance/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-account-balance\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-account-balance/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_balance_of()\n+}\n+\n+fn call_balance_of() -> u64 {\n+    unsafe { balance_of() }\n+}"
        },
        {
          "filename": "examples/get-block-number/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-block-number/Cargo.lock",
          "additions": 229,
          "deletions": 0,
          "changes": 229,
          "status": "added",
          "patch": "@@ -0,0 +1,229 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n+[[package]]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"parity-scale-codec\",\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/get-block-number/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-block-number/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_block_number()\n+}\n+\n+fn call_block_number() -> u64 {\n+    unsafe { block_number() }\n+}"
        },
        {
          "filename": "examples/get-contract-balance/.gitignore",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "added",
          "patch": "@@ -0,0 +1 @@\n+target"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.lock",
          "additions": 229,
          "deletions": 0,
          "changes": 229,
          "status": "added",
          "patch": "@@ -0,0 +1,229 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n+[[package]]\n+name = \"get-block-number\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"parity-scale-codec\",\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/get-contract-balance/Cargo.toml",
          "additions": 9,
          "deletions": 0,
          "changes": 9,
          "status": "added",
          "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"get-contract-balance\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/get-contract-balance/src/main.rs",
          "additions": 13,
          "deletions": 0,
          "changes": 13,
          "status": "added",
          "patch": "@@ -0,0 +1,13 @@\n+#![no_std]\n+#![no_main]\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    call_balance()\n+}\n+\n+fn call_balance() -> u64 {\n+    unsafe { balance() }\n+}"
        },
        {
          "filename": "examples/increment-counter/Cargo.lock",
          "additions": 229,
          "deletions": 0,
          "changes": 229,
          "status": "added",
          "patch": "@@ -0,0 +1,229 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 4\n+\n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"increment-counter\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"parity-scale-codec\",\n+ \"polkavm-derive\",\n+ \"qf-polkavm-sdk\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-common\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+\n+[[package]]\n+name = \"polkavm-derive\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl-macro\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-common\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"polkavm-derive-impl-macro\"\n+version = \"0.21.0\"\n+source = \"git+https://github.com/paritytech/polkavm.git?tag=v0.21.0#78eab63bdf85ced46598e34d9c396e6d59b591e1\"\n+dependencies = [\n+ \"polkavm-derive-impl\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.94\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"qf-polkavm-sdk\"\n+version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.40\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"2.0.100\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/increment-counter/Cargo.toml",
          "additions": 10,
          "deletions": 0,
          "changes": 10,
          "status": "added",
          "patch": "@@ -0,0 +1,10 @@\n+[package]\n+name = \"increment-counter\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+publish = false\n+\n+[dependencies]\n+parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n+polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }"
        },
        {
          "filename": "examples/increment-counter/src/main.rs",
          "additions": 73,
          "deletions": 0,
          "changes": 73,
          "status": "added",
          "patch": "@@ -0,0 +1,73 @@\n+#![no_std]\n+#![no_main]\n+\n+use parity_scale_codec::{Decode, Encode};\n+\n+qf_polkavm_sdk::host_functions!();\n+\n+#[derive(Encode, Decode, Default)]\n+struct Counter {\n+    counter: u32,\n+}\n+\n+#[polkavm_derive::polkavm_export]\n+extern \"C\" fn main() -> u64 {\n+    let mut buffer = [0u8; 64];\n+    if let Err(err) = get_input_data(&mut buffer) {\n+        return err;\n+    }\n+\n+    let increment = u32::from_be_bytes(buffer[..4].try_into().unwrap());\n+\n+    call_increment(increment)\n+}\n+\n+fn get_input_data(buffer: &mut [u8; 64]) -> Result<(), u64> {\n+    let pointer: *mut [u8; 64] = buffer;\n+\n+    match unsafe { get_user_data(pointer as u32) } {\n+        0 => Ok(()),\n+        err => Err(err),\n+    }\n+}\n+\n+fn call_increment(increment: u32) -> u64 {\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n+\n+    unsafe {\n+        match get(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+\n+        let mut tmp: &[u8] = &buffer;\n+        let mut counter = if buffer == [0u8; 64] {\n+            Counter::default()\n+        } else {\n+            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n+        };\n+\n+        counter.counter = counter.counter.saturating_add(increment);\n+\n+        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n+            buffer[pos] = *elem\n+        }\n+\n+        match set(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+    }\n+\n+    0\n+}"
        }
      ],
      "additions": 1068,
      "deletions": 0,
      "total_changes": 1068,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "7a6075e5b39799b37716a67770aa0feb0dcbf898",
      "message": "Update examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-16T10:30:09+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/7a6075e5b39799b37716a67770aa0feb0dcbf898",
      "files_changed": [
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 38,
          "deletions": 22,
          "changes": 60,
          "status": "modified",
          "patch": "@@ -23,8 +23,8 @@ struct Counter {\n \n #[polkavm_derive::polkavm_export]\n extern \"C\" fn main() -> u64 {\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n+    let mut buffer = [0u8; 2048];\n+    let pointer: *mut [u8; 2048] = &mut buffer;\n \n     let command: Command;\n \n@@ -74,17 +74,25 @@ fn call_transfer() -> u64 {\n }\n \n fn call_inc() -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n-\n-    let mut buffer = [0u8; 64];\n-    let pointer: *mut [u8; 64] = &mut buffer;\n+    // \"                                                                                                                                                                                                                                                             foo\"\n+    // \"0xn+    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 256] = &storage_key;\n+\n+    let mut buffer = [0u8; 2048];\n+    let pointer: *mut [u8; 2048] = &mut buffer;\n \n     unsafe {\n         match get(storage_key_pointer as u32, pointer as u32) {\n@@ -93,7 +101,7 @@ fn call_inc() -> u64 {\n         }\n \n         let mut tmp: &[u8] = &buffer;\n-        let mut counter = if buffer == [0u8; 64] {\n+        let mut counter = if buffer == [0u8; 2048] {\n             Counter::default()\n         } else {\n             Counter::decode(&mut tmp).unwrap_or(Counter::default())\n@@ -115,14 +123,22 @@ fn call_inc() -> u64 {\n }\n \n fn call_delete() -> u64 {\n-    // \"                                                             foo\"\n-    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n-        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n-    ];\n-    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+    // \"                                                                                                                                                                                                                                                             foo\"\n+    // \"0xn+    let storage_key: [u8; 256] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 256] = &storage_key;\n \n     unsafe {\n         let delete_result = delete(storage_key_pointer as u32);"
        }
      ],
      "additions": 38,
      "deletions": 22,
      "total_changes": 60,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "2d97a909487239fdfedd240c597bfb06cd266f61",
      "message": "Merge pull request #9 from QuantumFusion-network/andor0/issue-333\n\nWrite documentation for smart-contracts compilation",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-15T12:07:22+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/2d97a909487239fdfedd240c597bfb06cd266f61",
      "files_changed": [
        {
          "filename": ".gitignore",
          "additions": 2,
          "deletions": 0,
          "changes": 2,
          "status": "added",
          "patch": "@@ -0,0 +1,2 @@\n+target\n+output"
        },
        {
          "filename": "README.md",
          "additions": 25,
          "deletions": 1,
          "changes": 26,
          "status": "modified",
          "patch": "@@ -34,7 +34,31 @@ See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n \n ## Compiling Smart Contracts for PolkaVM\n \n-Please read section [Compiling Smart Contracts for PolkaVM](https://github.com/QuantumFusion-network/qf-solochain/blob/main/README.md).\n+1. Install `polkatool`\n+\n+```bash\n+cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n+```\n+\n+2. Build smart-contract `examples/hello-qf-polkavm`\n+\n+```bash\n+export CRATE_NAME=hello-qf-polkavm\n+mkdir -p output\n+\n+pushd \"examples/${CRATE_NAME}\"\n+RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+    cargo +nightly build  \\\n+        -Z build-std=core,alloc \\\n+        --target $(polkatool get-target-json-path --bitness 32) \\\n+        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+popd\n+\n+polkatool link \\\n+    --run-only-if-newer \\\n+    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+    -o \"output/${CRATE_NAME}.polkavm\"\n+```\n \n ## Contributing\n "
        },
        {
          "filename": "examples/hello-qf-polkavm/.gitignore",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        },
        {
          "filename": "examples/hello-qf-polkavm/Cargo.lock",
          "additions": 8,
          "deletions": 7,
          "changes": 15,
          "status": "renamed",
          "patch": "@@ -41,20 +41,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n \n [[package]]\n-name = \"example-smart-contract\"\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"hello-qf-polkavm\"\n version = \"0.1.0\"\n dependencies = [\n  \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n [[package]]\n name = \"impl-trait-for-tuples\"\n version = \"0.2.3\"\n@@ -162,6 +162,7 @@ dependencies = [\n [[package]]\n name = \"qf-polkavm-sdk\"\n version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n \n [[package]]\n name = \"quote\""
        },
        {
          "filename": "examples/hello-qf-polkavm/Cargo.toml",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "renamed",
          "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"example-smart-contract\"\n+name = \"hello-qf-polkavm\"\n version = \"0.1.0\"\n edition = \"2021\"\n publish = false"
        },
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        }
      ],
      "additions": 36,
      "deletions": 9,
      "total_changes": 45,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "54da4ca987f36e8a081737fb10d988ef402c06ff",
      "message": "Update README.md",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-15T11:36:07+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/54da4ca987f36e8a081737fb10d988ef402c06ff",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -34,7 +34,7 @@ See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n \n ## Compiling Smart Contracts for PolkaVM\n \n-1. Install polkatool\n+1. Install `polkatool`\n \n ```bash\n cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool"
        }
      ],
      "additions": 1,
      "deletions": 1,
      "total_changes": 2,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "c8c7741419fc6aa335030b440c486c50d98a6ef8",
      "message": "Add .gitignore",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-15T11:33:11+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/c8c7741419fc6aa335030b440c486c50d98a6ef8",
      "files_changed": [
        {
          "filename": ".gitignore",
          "additions": 2,
          "deletions": 0,
          "changes": 2,
          "status": "added",
          "patch": "@@ -0,0 +1,2 @@\n+target\n+output"
        }
      ],
      "additions": 2,
      "deletions": 0,
      "total_changes": 2,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "0f803c0b6f36d9d77940afb92aaa6092b8be5ac5",
      "message": "Update README.md",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-15T11:32:55+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/0f803c0b6f36d9d77940afb92aaa6092b8be5ac5",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -40,7 +40,7 @@ See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n ```\n \n-2. Build a hello-qf-polkavm\n+2. Build smart-contract `examples/hello-qf-polkavm`\n \n ```bash\n export CRATE_NAME=hello-qf-polkavm"
        }
      ],
      "additions": 1,
      "deletions": 1,
      "total_changes": 2,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "649bc4c9ed73b1d53e6e27054e668932f135e6d1",
      "message": "Update examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-15T11:29:40+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/649bc4c9ed73b1d53e6e27054e668932f135e6d1",
      "files_changed": [
        {
          "filename": "examples/hello-qf-polkavm/Cargo.lock",
          "additions": 8,
          "deletions": 7,
          "changes": 15,
          "status": "modified",
          "patch": "@@ -41,20 +41,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n \n [[package]]\n-name = \"example-smart-contract\"\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"hello-qf-polkavm\"\n version = \"0.1.0\"\n dependencies = [\n  \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.15.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n-\n [[package]]\n name = \"impl-trait-for-tuples\"\n version = \"0.2.3\"\n@@ -162,6 +162,7 @@ dependencies = [\n [[package]]\n name = \"qf-polkavm-sdk\"\n version = \"0.1.0\"\n+source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#2f43067d922878d07bf9f12112054a62ff205144\"\n \n [[package]]\n name = \"quote\""
        },
        {
          "filename": "examples/hello-qf-polkavm/Cargo.toml",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -1,5 +1,5 @@\n [package]\n-name = \"example-smart-contract\"\n+name = \"hello-qf-polkavm\"\n version = \"0.1.0\"\n edition = \"2021\"\n publish = false"
        }
      ],
      "additions": 9,
      "deletions": 8,
      "total_changes": 17,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "baeb31b2f7f0c180e61ba5e62a7a7d993df35bb6",
      "message": "Update README.md",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-15T11:28:53+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/baeb31b2f7f0c180e61ba5e62a7a7d993df35bb6",
      "files_changed": [
        {
          "filename": "README.md",
          "additions": 25,
          "deletions": 1,
          "changes": 26,
          "status": "modified",
          "patch": "@@ -34,7 +34,31 @@ See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n \n ## Compiling Smart Contracts for PolkaVM\n \n-Please read section [Compiling Smart Contracts for PolkaVM](https://github.com/QuantumFusion-network/qf-solochain/blob/main/README.md).\n+1. Install polkatool\n+\n+```bash\n+cargo install --git https://github.com/paritytech/polkavm.git --tag v0.21.0 polkatool\n+```\n+\n+2. Build a hello-qf-polkavm\n+\n+```bash\n+export CRATE_NAME=hello-qf-polkavm\n+mkdir -p output\n+\n+pushd \"examples/${CRATE_NAME}\"\n+RUSTFLAGS=\"--remap-path-prefix=$(pwd)= --remap-path-prefix=${HOME}=~\" \\\n+    cargo +nightly build  \\\n+        -Z build-std=core,alloc \\\n+        --target $(polkatool get-target-json-path --bitness 32) \\\n+        -q --release --bin \"${CRATE_NAME}\" -p \"${CRATE_NAME}\"\n+popd\n+\n+polkatool link \\\n+    --run-only-if-newer \\\n+    -s \"examples/${CRATE_NAME}/target/riscv32emac-unknown-none-polkavm/release/${CRATE_NAME}\" \\\n+    -o \"output/${CRATE_NAME}.polkavm\"\n+```\n \n ## Contributing\n "
        },
        {
          "filename": "examples/hello-qf-polkavm/.gitignore",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        },
        {
          "filename": "examples/hello-qf-polkavm/Cargo.lock",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        },
        {
          "filename": "examples/hello-qf-polkavm/Cargo.toml",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        },
        {
          "filename": "examples/hello-qf-polkavm/src/main.rs",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "renamed",
          "patch": null
        }
      ],
      "additions": 25,
      "deletions": 1,
      "total_changes": 26,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "2f43067d922878d07bf9f12112054a62ff205144",
      "message": "Merge pull request #8 from QuantumFusion-network/issue/fix-logo\n\nAdd logo",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-14T07:20:01+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/2f43067d922878d07bf9f12112054a62ff205144",
      "files_changed": [
        {
          "filename": "Logo.jpg",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "added",
          "patch": null
        }
      ],
      "additions": 0,
      "deletions": 0,
      "total_changes": 0,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "5e53d7b13f1e074654f5a9f683059c815d0b43e6",
      "message": "Add logo",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "timestamp": "2025-05-14T07:19:33+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/5e53d7b13f1e074654f5a9f683059c815d0b43e6",
      "files_changed": [
        {
          "filename": "Logo.jpg",
          "additions": 0,
          "deletions": 0,
          "changes": 0,
          "status": "added",
          "patch": null
        }
      ],
      "additions": 0,
      "deletions": 0,
      "total_changes": 0,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "288d4cf4eff5cfca59de0c7f6fdde2525ec976cf",
      "message": "Merge pull request #7 from QuantumFusion-network/issue/docs_2\n\nUpdate accoring to review",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-14T07:17:35+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/288d4cf4eff5cfca59de0c7f6fdde2525ec976cf",
      "files_changed": [
        {
          "filename": "LICENSE",
          "additions": 21,
          "deletions": 0,
          "changes": 21,
          "status": "added",
          "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2024 QuantumFusion-network\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
        },
        {
          "filename": "README.md",
          "additions": 6,
          "deletions": 4,
          "changes": 10,
          "status": "modified",
          "patch": "@@ -4,11 +4,11 @@\n \n # Quantum Fusion\n \n-[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-solochain/blob/main/LICENSE)\n+[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-polkavm-sdk/blob/main/LICENSE)\n <br>\n-![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-solochain)\n-![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-solochain)\n-![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-solochain)\n+![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-polkavm-sdk)\n+![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-polkavm-sdk)\n+![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-polkavm-sdk)\n <br>\n [![Twitter URL](https://img.shields.io/twitter/follow/QuantumFusion_?style=social)](https://x.com/QuantumFusion_)\n \n@@ -20,6 +20,8 @@ For contributing to this project, please read [Contributing](#contributing) sect\n \n This framework allows to implement contracts for Quantum Fusion Network.\n \n+For getting more technical information please follow to this [link](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n+\n ## Run examples\n \n To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/)."
        }
      ],
      "additions": 27,
      "deletions": 4,
      "total_changes": 31,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "5deb107cd70e69a5286516176cb24ba58cef4d4f",
      "message": "Update accoring to review",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "timestamp": "2025-05-14T07:17:07+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/5deb107cd70e69a5286516176cb24ba58cef4d4f",
      "files_changed": [
        {
          "filename": "LICENSE",
          "additions": 21,
          "deletions": 0,
          "changes": 21,
          "status": "added",
          "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2024 QuantumFusion-network\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
        },
        {
          "filename": "README.md",
          "additions": 6,
          "deletions": 4,
          "changes": 10,
          "status": "modified",
          "patch": "@@ -4,11 +4,11 @@\n \n # Quantum Fusion\n \n-[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-solochain/blob/main/LICENSE)\n+[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-polkavm-sdk/blob/main/LICENSE)\n <br>\n-![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-solochain)\n-![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-solochain)\n-![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-solochain)\n+![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-polkavm-sdk)\n+![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-polkavm-sdk)\n+![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-polkavm-sdk)\n <br>\n [![Twitter URL](https://img.shields.io/twitter/follow/QuantumFusion_?style=social)](https://x.com/QuantumFusion_)\n \n@@ -20,6 +20,8 @@ For contributing to this project, please read [Contributing](#contributing) sect\n \n This framework allows to implement contracts for Quantum Fusion Network.\n \n+For getting more technical information please follow to this [link](https://github.com/QuantumFusion-network/spec/blob/main/docs/PolkaVM/polkavm_pallet.md).\n+\n ## Run examples\n \n To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/)."
        }
      ],
      "additions": 27,
      "deletions": 4,
      "total_changes": 31,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "9814dc976bfde7aa910fe29d3474c562f2e07d0b",
      "message": "Merge pull request #6 from QuantumFusion-network/issue/docs_1\n\nUpdate diag. accoring to review",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-14T07:13:19+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/9814dc976bfde7aa910fe29d3474c562f2e07d0b",
      "files_changed": [
        {
          "filename": "CODE_OF_CONDUCT.md",
          "additions": 132,
          "deletions": 0,
          "changes": 132,
          "status": "added",
          "patch": "@@ -0,0 +1,132 @@\n+# Contributor Covenant Code of Conduct\n+\n+## Our Pledge\n+\n+We as members, contributors, and leaders pledge to make participation in our\n+community a harassment-free experience for everyone, regardless of age, body\n+size, visible or invisible disability, ethnicity, sex characteristics, gender\n+identity and expression, level of experience, education, socio-economic status,\n+nationality, personal appearance, race, caste, color, religion, or sexual\n+identity and orientation.\n+\n+We pledge to act and interact in ways that contribute to an open, welcoming,\n+diverse, inclusive, and healthy community.\n+\n+## Our Standards\n+\n+Examples of behavior that contributes to a positive environment for our\n+community include:\n+\n+* Demonstrating empathy and kindness toward other people\n+* Being respectful of differing opinions, viewpoints, and experiences\n+* Giving and gracefully accepting constructive feedback\n+* Accepting responsibility and apologizing to those affected by our mistakes,\n+  and learning from the experience\n+* Focusing on what is best not just for us as individuals, but for the overall\n+  community\n+\n+Examples of unacceptable behavior include:\n+\n+* The use of sexualized language or imagery, and sexual attention or advances of\n+  any kind\n+* Trolling, insulting or derogatory comments, and personal or political attacks\n+* Public or private harassment\n+* Publishing others' private information, such as a physical or email address,\n+  without their explicit permission\n+* Other conduct which could reasonably be considered inappropriate in a\n+  professional setting\n+\n+## Enforcement Responsibilities\n+\n+Community leaders are responsible for clarifying and enforcing our standards of\n+acceptable behavior and will take appropriate and fair corrective action in\n+response to any behavior that they deem inappropriate, threatening, offensive,\n+or harmful.\n+\n+Community leaders have the right and responsibility to remove, edit, or reject\n+comments, commits, code, wiki edits, issues, and other contributions that are\n+not aligned to this Code of Conduct, and will communicate reasons for moderation\n+decisions when appropriate.\n+\n+## Scope\n+\n+This Code of Conduct applies within all community spaces, and also applies when\n+an individual is officially representing the community in public spaces.\n+Examples of representing our community include using an official email address,\n+posting via an official social media account, or acting as an appointed\n+representative at an online or offline event.\n+\n+## Enforcement\n+\n+Instances of abusive, harassing, or otherwise unacceptable behavior may be\n+reported to the community leaders responsible for enforcement at\n+<admin@qfnetwork.xyz>. All complaints will be reviewed and investigated\n+promptly and fairly.\n+\n+All community leaders are obligated to respect the privacy and security of the\n+reporter of any incident.\n+\n+## Enforcement Guidelines\n+\n+Community leaders will follow these Community Impact Guidelines in determining\n+the consequences for any action they deem in violation of this Code of Conduct:\n+\n+### 1. Correction\n+\n+**Community Impact**: Use of inappropriate language or other behavior deemed\n+unprofessional or unwelcome in the community.\n+\n+**Consequence**: A private, written warning from community leaders, providing\n+clarity around the nature of the violation and an explanation of why the\n+behavior was inappropriate. A public apology may be requested.\n+\n+### 2. Warning\n+\n+**Community Impact**: A violation through a single incident or series of\n+actions.\n+\n+**Consequence**: A warning with consequences for continued behavior. No\n+interaction with the people involved, including unsolicited interaction with\n+those enforcing the Code of Conduct, for a specified period of time. This\n+includes avoiding interactions in community spaces as well as external channels\n+like social media. Violating these terms may lead to a temporary or permanent\n+ban.\n+\n+### 3. Temporary Ban\n+\n+**Community Impact**: A serious violation of community standards, including\n+sustained inappropriate behavior.\n+\n+**Consequence**: A temporary ban from any sort of interaction or public\n+communication with the community for a specified period of time. No public or\n+private interaction with the people involved, including unsolicited interaction\n+with those enforcing the Code of Conduct, is allowed during this period.\n+Violating these terms may lead to a permanent ban.\n+\n+### 4. Permanent Ban\n+\n+**Community Impact**: Demonstrating a pattern of violation of community\n+standards, including sustained inappropriate behavior, harassment of an\n+individual, or aggression toward or disparagement of classes of individuals.\n+\n+**Consequence**: A permanent ban from any sort of public interaction within the\n+community.\n+\n+## Attribution\n+\n+This Code of Conduct is adapted from the [Contributor Covenant][homepage],\n+version 2.1, available at\n+[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n+\n+Community Impact Guidelines were inspired by\n+[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n+\n+For answers to common questions about this code of conduct, see the FAQ at\n+[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n+[https://www.contributor-covenant.org/translations][translations].\n+\n+[homepage]: https://www.contributor-covenant.org\n+[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n+[Mozilla CoC]: https://github.com/mozilla/diversity\n+[FAQ]: https://www.contributor-covenant.org/faq\n+[translations]: https://www.contributor-covenant.org/translations"
        },
        {
          "filename": "README.md",
          "additions": 54,
          "deletions": 1,
          "changes": 55,
          "status": "modified",
          "patch": "@@ -1 +1,54 @@\n-# qf-polkavm-sdk\n+<div align=\"center\">\n+\n+![Logo](Logo.jpg)\n+\n+# Quantum Fusion\n+\n+[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-solochain/blob/main/LICENSE)\n+<br>\n+![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-solochain)\n+![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-solochain)\n+![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-solochain)\n+<br>\n+[![Twitter URL](https://img.shields.io/twitter/follow/QuantumFusion_?style=social)](https://x.com/QuantumFusion_)\n+\n+</div>\n+\n+For contributing to this project, please read [Contributing](#contributing) section.\n+\n+# QF PolkaVM SDK\n+\n+This framework allows to implement contracts for Quantum Fusion Network.\n+\n+## Run examples\n+\n+To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/).\n+\n+## Executables and runtimes\n+\n+This section describes the project's executables and runtimes and provides step-by-step instructions\n+ for running a local testnet. This guide is suitable for advanced users.\n+See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n+\n+## Compiling Smart Contracts for PolkaVM\n+\n+Please read section [Compiling Smart Contracts for PolkaVM](https://github.com/QuantumFusion-network/qf-solochain/blob/main/README.md).\n+\n+## Contributing\n+\n+We welcome contributions of all kinds! Whether you're reporting or fixing a bug, adding a feature, or improving\n+documentation, your help is greatly appreciated. For a bug or vulnerability report please [open a new issue](https://github.com/QuantumFusion-network/qf-polkavm-sdk/issues).\n+\n+For code contributions please follow these steps:\n+\n+1. Fork the repository and create a new branch following the format `your-github-name/descriptive-branch-name` (e.g., `qf-polkavm-sdk/fix-123`).\n+2. Make smaller commits with clear messages to simplify reviewer's work.\n+3. Submit a pull request targeting `main` branch and provide a concise description of your changes.\n+\n+By contributing, you agree to adhere to our [Contributor Covenant Code of Conduct](./CODE_OF_CONDUCT.md), which fosters\n+a respectful and inclusive environment.\n+\n+We appreciate your support and look forward to your contributions! 🚀\n+\n+[^1]: <https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811#the-compilation-pipeline-7> \"The compilation pipeline\".\n+[^2]: <https://github.com/paritytech/polkadot-sdk/tree/master/substrate/bin/utils/chain-spec-builder> \"chain-spec-builder\"."
        },
        {
          "filename": "SECURITY.md",
          "additions": 23,
          "deletions": 0,
          "changes": 23,
          "status": "added",
          "patch": "@@ -0,0 +1,23 @@\n+# Security Policy\n+\n+## Reporting a Vulnerability\n+\n+We are at the very beginning of our journey (as of March 2025). While we build on the shoulders of giants like Rust and\n+Polkadot SDK, following industry standards and best practices, it would be overly optimistic to expect a completely\n+secure system at this stage. Our goal is to communicate transparently about any issues and address them swiftly and\n+carefully.\n+\n+If you discover a vulnerability or have a security concern, please report it to <security@qfnetwork.xyz>. A detailed\n+explanation, including reproduction steps or a reference to the vulnerability source code, would be greatly appreciated!\n+\n+## Supported Versions\n+\n+## DevNet\n+\n+Rule only for DevNet: Until major version is released we might not accept security update for minor or patch version.\n+\n+| Version | Supported          |\n+| ------- | ------------------ |\n+| v0.0.3  | :white_check_mark: |\n+| v0.0.2  | :x:                |\n+| v0.0.1  | :x:                |"
        }
      ],
      "additions": 209,
      "deletions": 1,
      "total_changes": 210,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": true,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "128f89488570204d9961d02ea1b9bef02e1ebb62",
      "message": "Update diag. accoring to review",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "timestamp": "2025-05-14T07:05:33+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/128f89488570204d9961d02ea1b9bef02e1ebb62",
      "files_changed": [
        {
          "filename": "CODE_OF_CONDUCT.md",
          "additions": 132,
          "deletions": 0,
          "changes": 132,
          "status": "added",
          "patch": "@@ -0,0 +1,132 @@\n+# Contributor Covenant Code of Conduct\n+\n+## Our Pledge\n+\n+We as members, contributors, and leaders pledge to make participation in our\n+community a harassment-free experience for everyone, regardless of age, body\n+size, visible or invisible disability, ethnicity, sex characteristics, gender\n+identity and expression, level of experience, education, socio-economic status,\n+nationality, personal appearance, race, caste, color, religion, or sexual\n+identity and orientation.\n+\n+We pledge to act and interact in ways that contribute to an open, welcoming,\n+diverse, inclusive, and healthy community.\n+\n+## Our Standards\n+\n+Examples of behavior that contributes to a positive environment for our\n+community include:\n+\n+* Demonstrating empathy and kindness toward other people\n+* Being respectful of differing opinions, viewpoints, and experiences\n+* Giving and gracefully accepting constructive feedback\n+* Accepting responsibility and apologizing to those affected by our mistakes,\n+  and learning from the experience\n+* Focusing on what is best not just for us as individuals, but for the overall\n+  community\n+\n+Examples of unacceptable behavior include:\n+\n+* The use of sexualized language or imagery, and sexual attention or advances of\n+  any kind\n+* Trolling, insulting or derogatory comments, and personal or political attacks\n+* Public or private harassment\n+* Publishing others' private information, such as a physical or email address,\n+  without their explicit permission\n+* Other conduct which could reasonably be considered inappropriate in a\n+  professional setting\n+\n+## Enforcement Responsibilities\n+\n+Community leaders are responsible for clarifying and enforcing our standards of\n+acceptable behavior and will take appropriate and fair corrective action in\n+response to any behavior that they deem inappropriate, threatening, offensive,\n+or harmful.\n+\n+Community leaders have the right and responsibility to remove, edit, or reject\n+comments, commits, code, wiki edits, issues, and other contributions that are\n+not aligned to this Code of Conduct, and will communicate reasons for moderation\n+decisions when appropriate.\n+\n+## Scope\n+\n+This Code of Conduct applies within all community spaces, and also applies when\n+an individual is officially representing the community in public spaces.\n+Examples of representing our community include using an official email address,\n+posting via an official social media account, or acting as an appointed\n+representative at an online or offline event.\n+\n+## Enforcement\n+\n+Instances of abusive, harassing, or otherwise unacceptable behavior may be\n+reported to the community leaders responsible for enforcement at\n+<admin@qfnetwork.xyz>. All complaints will be reviewed and investigated\n+promptly and fairly.\n+\n+All community leaders are obligated to respect the privacy and security of the\n+reporter of any incident.\n+\n+## Enforcement Guidelines\n+\n+Community leaders will follow these Community Impact Guidelines in determining\n+the consequences for any action they deem in violation of this Code of Conduct:\n+\n+### 1. Correction\n+\n+**Community Impact**: Use of inappropriate language or other behavior deemed\n+unprofessional or unwelcome in the community.\n+\n+**Consequence**: A private, written warning from community leaders, providing\n+clarity around the nature of the violation and an explanation of why the\n+behavior was inappropriate. A public apology may be requested.\n+\n+### 2. Warning\n+\n+**Community Impact**: A violation through a single incident or series of\n+actions.\n+\n+**Consequence**: A warning with consequences for continued behavior. No\n+interaction with the people involved, including unsolicited interaction with\n+those enforcing the Code of Conduct, for a specified period of time. This\n+includes avoiding interactions in community spaces as well as external channels\n+like social media. Violating these terms may lead to a temporary or permanent\n+ban.\n+\n+### 3. Temporary Ban\n+\n+**Community Impact**: A serious violation of community standards, including\n+sustained inappropriate behavior.\n+\n+**Consequence**: A temporary ban from any sort of interaction or public\n+communication with the community for a specified period of time. No public or\n+private interaction with the people involved, including unsolicited interaction\n+with those enforcing the Code of Conduct, is allowed during this period.\n+Violating these terms may lead to a permanent ban.\n+\n+### 4. Permanent Ban\n+\n+**Community Impact**: Demonstrating a pattern of violation of community\n+standards, including sustained inappropriate behavior, harassment of an\n+individual, or aggression toward or disparagement of classes of individuals.\n+\n+**Consequence**: A permanent ban from any sort of public interaction within the\n+community.\n+\n+## Attribution\n+\n+This Code of Conduct is adapted from the [Contributor Covenant][homepage],\n+version 2.1, available at\n+[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n+\n+Community Impact Guidelines were inspired by\n+[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n+\n+For answers to common questions about this code of conduct, see the FAQ at\n+[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n+[https://www.contributor-covenant.org/translations][translations].\n+\n+[homepage]: https://www.contributor-covenant.org\n+[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n+[Mozilla CoC]: https://github.com/mozilla/diversity\n+[FAQ]: https://www.contributor-covenant.org/faq\n+[translations]: https://www.contributor-covenant.org/translations"
        },
        {
          "filename": "README.md",
          "additions": 54,
          "deletions": 1,
          "changes": 55,
          "status": "modified",
          "patch": "@@ -1 +1,54 @@\n-# qf-polkavm-sdk\n+<div align=\"center\">\n+\n+![Logo](Logo.jpg)\n+\n+# Quantum Fusion\n+\n+[![License](https://img.shields.io/github/license/QuantumFusion-network/qf-solochain?color=green)](https://github.com/QuantumFusion-network/qf-solochain/blob/main/LICENSE)\n+<br>\n+![GitHub contributors](https://img.shields.io/github/contributors/QuantumFusion-network/qf-solochain)\n+![GitHub commit activity](https://img.shields.io/github/commit-activity/m/QuantumFusion-network/qf-solochain)\n+![GitHub last commit](https://img.shields.io/github/last-commit/QuantumFusion-network/qf-solochain)\n+<br>\n+[![Twitter URL](https://img.shields.io/twitter/follow/QuantumFusion_?style=social)](https://x.com/QuantumFusion_)\n+\n+</div>\n+\n+For contributing to this project, please read [Contributing](#contributing) section.\n+\n+# QF PolkaVM SDK\n+\n+This framework allows to implement contracts for Quantum Fusion Network.\n+\n+## Run examples\n+\n+To run examples or other smart contracts first need to have install [qf-solochain](https://github.com/QuantumFusion-network/qf-solochain) or via [portal](http://portal.qfnetwork.xyz/).\n+\n+## Executables and runtimes\n+\n+This section describes the project's executables and runtimes and provides step-by-step instructions\n+ for running a local testnet. This guide is suitable for advanced users.\n+See [docs/executables_and_runtimes.md](docs/executables_and_runtimes.md).\n+\n+## Compiling Smart Contracts for PolkaVM\n+\n+Please read section [Compiling Smart Contracts for PolkaVM](https://github.com/QuantumFusion-network/qf-solochain/blob/main/README.md).\n+\n+## Contributing\n+\n+We welcome contributions of all kinds! Whether you're reporting or fixing a bug, adding a feature, or improving\n+documentation, your help is greatly appreciated. For a bug or vulnerability report please [open a new issue](https://github.com/QuantumFusion-network/qf-polkavm-sdk/issues).\n+\n+For code contributions please follow these steps:\n+\n+1. Fork the repository and create a new branch following the format `your-github-name/descriptive-branch-name` (e.g., `qf-polkavm-sdk/fix-123`).\n+2. Make smaller commits with clear messages to simplify reviewer's work.\n+3. Submit a pull request targeting `main` branch and provide a concise description of your changes.\n+\n+By contributing, you agree to adhere to our [Contributor Covenant Code of Conduct](./CODE_OF_CONDUCT.md), which fosters\n+a respectful and inclusive environment.\n+\n+We appreciate your support and look forward to your contributions! 🚀\n+\n+[^1]: <https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811#the-compilation-pipeline-7> \"The compilation pipeline\".\n+[^2]: <https://github.com/paritytech/polkadot-sdk/tree/master/substrate/bin/utils/chain-spec-builder> \"chain-spec-builder\"."
        },
        {
          "filename": "SECURITY.md",
          "additions": 23,
          "deletions": 0,
          "changes": 23,
          "status": "added",
          "patch": "@@ -0,0 +1,23 @@\n+# Security Policy\n+\n+## Reporting a Vulnerability\n+\n+We are at the very beginning of our journey (as of March 2025). While we build on the shoulders of giants like Rust and\n+Polkadot SDK, following industry standards and best practices, it would be overly optimistic to expect a completely\n+secure system at this stage. Our goal is to communicate transparently about any issues and address them swiftly and\n+carefully.\n+\n+If you discover a vulnerability or have a security concern, please report it to <security@qfnetwork.xyz>. A detailed\n+explanation, including reproduction steps or a reference to the vulnerability source code, would be greatly appreciated!\n+\n+## Supported Versions\n+\n+## DevNet\n+\n+Rule only for DevNet: Until major version is released we might not accept security update for minor or patch version.\n+\n+| Version | Supported          |\n+| ------- | ------------------ |\n+| v0.0.3  | :white_check_mark: |\n+| v0.0.2  | :x:                |\n+| v0.0.1  | :x:                |"
        }
      ],
      "additions": 209,
      "deletions": 1,
      "total_changes": 210,
      "commit_type": "documentation",
      "is_breaking_change": false,
      "affects_security": true,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "7abc3d5560cd8fb3f03628e439c0fa1a01ca50e5",
      "message": "Merge pull request #5 from QuantumFusion-network/andor0/issue-320-2\n\nUpdate deps",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-14T06:45:08+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/7abc3d5560cd8fb3f03628e439c0fa1a01ca50e5",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/Cargo.toml",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -7,5 +7,5 @@ publish = false\n [dependencies]\n parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"b3ede4ca4fcc1c4c3c119c315e72213ff420f817\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }\n "
        }
      ],
      "additions": 1,
      "deletions": 1,
      "total_changes": 2,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "529c05d21ab4741c291f5ebc6c500ccafdf664b9",
      "message": "Update deps",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-14T06:42:39+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/529c05d21ab4741c291f5ebc6c500ccafdf664b9",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/Cargo.toml",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "status": "modified",
          "patch": "@@ -7,5 +7,5 @@ publish = false\n [dependencies]\n parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n-qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"b3ede4ca4fcc1c4c3c119c315e72213ff420f817\" }\n+qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"a0f7e7728da711ce9d5249a7801298c3638dde95\" }\n "
        }
      ],
      "additions": 1,
      "deletions": 1,
      "total_changes": 2,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "a0f7e7728da711ce9d5249a7801298c3638dde95",
      "message": "Merge pull request #4 from QuantumFusion-network/andor0/issue-320\n\nUpdate SDK",
      "author": {
        "name": "Vas Soshnikov",
        "email": "dedok.mad@gmail.com",
        "username": "dedok",
        "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
      },
      "committer": {
        "name": "GitHub Web Flow",
        "email": null,
        "username": "web-flow",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4"
      },
      "timestamp": "2025-05-14T06:38:26+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/a0f7e7728da711ce9d5249a7801298c3638dde95",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/Cargo.lock",
          "additions": 145,
          "deletions": 1,
          "changes": 146,
          "status": "modified",
          "patch": "@@ -2,14 +2,112 @@\n # It is not intended for manual editing.\n version = 4\n \n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n [[package]]\n name = \"example-smart-contract\"\n version = \"0.1.0\"\n dependencies = [\n+ \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"polkavm-common\"\n version = \"0.21.0\"\n@@ -43,6 +141,15 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.94\"\n@@ -55,7 +162,6 @@ dependencies = [\n [[package]]\n name = \"qf-polkavm-sdk\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#b3ede4ca4fcc1c4c3c119c315e72213ff420f817\"\n \n [[package]]\n name = \"quote\"\n@@ -66,6 +172,12 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n [[package]]\n name = \"syn\"\n version = \"2.0.100\"\n@@ -77,8 +189,40 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n [[package]]\n name = \"unicode-ident\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/example-smart-contract/Cargo.toml",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "modified",
          "patch": "@@ -5,6 +5,7 @@ edition = \"2021\"\n publish = false\n \n [dependencies]\n+parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"b3ede4ca4fcc1c4c3c119c315e72213ff420f817\" }\n "
        },
        {
          "filename": "examples/example-smart-contract/src/main.rs",
          "additions": 95,
          "deletions": 16,
          "changes": 111,
          "status": "modified",
          "patch": "@@ -1,18 +1,55 @@\n #![no_std]\n #![no_main]\n \n+use parity_scale_codec::{Decode, Encode};\n+\n qf_polkavm_sdk::host_functions!();\n \n+#[derive(Encode, Decode)]\n+enum Command {\n+    Transfer,     // 0x00\n+    Balance,      // 0x01\n+    BalanceOf,    // 0x02\n+    BlockNumber,  // 0x03\n+    InfinityLoop, // 0x04\n+    Inc,          // 0x05\n+    Delete,       // 0x06\n+}\n+\n+#[derive(Encode, Decode, Default)]\n+struct Counter {\n+    counter: u32,\n+}\n+\n #[polkavm_derive::polkavm_export]\n-extern \"C\" fn main(op: u32) -> u64 {\n-    match op {\n-        0 => call_transfer(),\n-        1 => call_balance(),\n-        3 => call_block_number(),\n-        2 => call_balance_of(),\n-        4 => call_infinity_loop(),\n-        5 => call_inc(),\n-        _ => unimplemented!(),\n+extern \"C\" fn main() -> u64 {\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n+\n+    let command: Command;\n+\n+    unsafe {\n+        match get_user_data(pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+\n+        let mut tmp: &[u8] = &buffer;\n+        if let Ok(new_command) = Command::decode(&mut tmp) {\n+            command = new_command;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+    match command {\n+        Command::Transfer => call_transfer(),\n+        Command::Balance => call_balance(),\n+        Command::BalanceOf => call_balance_of(),\n+        Command::BlockNumber => call_block_number(),\n+        Command::InfinityLoop => call_infinity_loop(),\n+        Command::Inc => call_inc(),\n+        Command::Delete => call_delete(),\n     }\n }\n \n@@ -37,19 +74,61 @@ fn call_transfer() -> u64 {\n }\n \n fn call_inc() -> u64 {\n-    let mut buffer = [0u8; 8];\n-    let pointer: *mut [u8; 8] = &mut buffer;\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n \n     unsafe {\n-        if get(pointer as u32, 0u32) != 0 {\n-            return 1\n+        match get(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+\n+        let mut tmp: &[u8] = &buffer;\n+        let mut counter = if buffer == [0u8; 64] {\n+            Counter::default()\n+        } else {\n+            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n         };\n \n-        buffer[7] += 1;\n+        counter.counter += 1;\n \n-        if set(pointer as u32, 0u32) != 0 {\n-            return 1\n+        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n+            buffer[pos] = *elem\n         }\n+\n+        match set(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+    }\n+\n+    0\n+}\n+\n+fn call_delete() -> u64 {\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    unsafe {\n+        let delete_result = delete(storage_key_pointer as u32);\n+        if delete_result != 0 {\n+            return delete_result;\n+        };\n     }\n \n     0"
        },
        {
          "filename": "src/lib.rs",
          "additions": 125,
          "deletions": 0,
          "changes": 125,
          "status": "modified",
          "patch": "@@ -4,6 +4,127 @@\n #[macro_export]\n macro_rules! host_functions {\n     () => {\n+        use core::alloc::{GlobalAlloc, Layout};\n+\n+        static mut INNER: Option<InnerAlloc> = None;\n+\n+        static mut HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n+\n+        #[global_allocator]\n+        static ALLOCATOR: BumpAllocator = BumpAllocator {};\n+\n+        pub struct BumpAllocator;\n+\n+        unsafe impl GlobalAlloc for BumpAllocator {\n+            #[inline]\n+            #[allow(static_mut_refs)]\n+            unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+                if INNER.is_none() {\n+                    INNER = Some(InnerAlloc::new());\n+                };\n+                match INNER\n+                    .as_mut()\n+                    .expect(\"We just set the value above; qed\")\n+                    .alloc(layout)\n+                {\n+                    Some(start) => start as *mut u8,\n+                    None => core::ptr::null_mut(),\n+                }\n+            }\n+\n+            #[inline]\n+            unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+                // todo\n+                // A new page is guaranteed to already be zero initialized, so we can just\n+                // use our regular `alloc` call here and save a bit of work.\n+                //\n+                // See: https://webassembly.github.io/spec/core/exec/modules.html#growing-memories\n+                self.alloc(layout)\n+            }\n+\n+            #[inline]\n+            unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+        }\n+\n+        #[derive(Debug, Copy, Clone)]\n+        struct InnerAlloc {\n+            /// Points to the start of the next available allocation.\n+            next: usize,\n+\n+            /// The address of the upper limit of our heap.\n+            upper_limit: usize,\n+        }\n+\n+        impl InnerAlloc {\n+            fn new() -> Self {\n+                Self {\n+                    next: Self::heap_start(),\n+                    upper_limit: Self::heap_end(),\n+                }\n+            }\n+\n+            fn heap_start() -> usize {\n+                #[allow(static_mut_refs)]\n+                unsafe {\n+                    HEAP.as_mut_ptr() as usize\n+                }\n+            }\n+\n+            #[allow(static_mut_refs)]\n+            fn heap_end() -> usize {\n+                Self::heap_start() + unsafe { HEAP.len() }\n+            }\n+\n+            #[allow(dead_code)]\n+            fn request_pages(&mut self, _pages: usize) -> Option<usize> {\n+                // On riscv the memory can't be grown\n+                core::panic!(\"no request possible\");\n+            }\n+\n+            /// Tries to allocate enough memory on the heap for the given `Layout`. If there is\n+            /// not enough room on the heap it'll try and grow it by a page.\n+            ///\n+            /// Note: This implementation results in internal fragmentation when allocating across\n+            /// pages.\n+            fn alloc(&mut self, layout: Layout) -> Option<usize> {\n+                let alloc_start = self.align_ptr(&layout);\n+\n+                let aligned_size = layout.size();\n+\n+                let alloc_end = alloc_start.checked_add(aligned_size)?;\n+\n+                if alloc_end > self.upper_limit {\n+                    panic!(\"exhausted heap limit\");\n+                } else {\n+                    self.next = alloc_end;\n+                    Some(alloc_start)\n+                }\n+            }\n+\n+            /// Aligns the start pointer of the next allocation.\n+            ///\n+            /// We inductively calculate the start index\n+            /// of a layout in the linear memory.\n+            /// - Initially `self.next` is `0`` and aligned\n+            /// - `layout.align() - 1` accounts for `0` as the first index.\n+            /// - the binary with the inverse of the align creates a bitmask that is used to zero\n+            ///   out bits, ensuring alignment according to type requirements and ensures that the\n+            ///   next allocated pointer address is of the power of 2.\n+            #[allow(clippy::arithmetic_side_effects)] // todo\n+            fn align_ptr(&self, layout: &Layout) -> usize {\n+                (self.next + layout.align() - 1) & !(layout.align() - 1)\n+            }\n+        }\n+\n+        /// Calculates the number of pages of memory needed for an allocation of `size` bytes.\n+        ///\n+        /// This function rounds up to the next page.\n+        #[inline]\n+        #[allow(dead_code)]\n+        fn required_pages(_size: usize) -> Option<usize> {\n+            core::panic!(\"required_pages\");\n+        }\n+\n         #[panic_handler]\n         fn panic(_info: &core::panic::PanicInfo) -> ! {\n             unsafe {\n@@ -20,6 +141,10 @@ macro_rules! host_functions {\n             fn block_number() -> u64;\n             fn account_id() -> u64;\n             fn caller() -> u64;\n+            fn get_user_data(pointer: u32) -> u64;\n+            fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n+            fn set(storage_key_pointer: u32, buffer: u32) -> u64;\n+            fn delete(storage_key_pointer: u32) -> u64;\n         }\n     };\n }"
        }
      ],
      "additions": 366,
      "deletions": 17,
      "total_changes": 383,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "909871d27012e1332de9c7028d2cf00f99e25aca",
      "message": "cargo fmt",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T19:34:35+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/909871d27012e1332de9c7028d2cf00f99e25aca",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/src/main.rs",
          "additions": 8,
          "deletions": 10,
          "changes": 18,
          "status": "modified",
          "patch": "@@ -7,13 +7,13 @@ qf_polkavm_sdk::host_functions!();\n \n #[derive(Encode, Decode)]\n enum Command {\n-    Transfer,       // 0x00\n-    Balance,        // 0x01\n-    BalanceOf,      // 0x02\n-    BlockNumber,    // 0x03\n-    InfinityLoop,   // 0x04\n-    Inc,            // 0x05\n-    Delete,         // 0x06\n+    Transfer,     // 0x00\n+    Balance,      // 0x01\n+    BalanceOf,    // 0x02\n+    BlockNumber,  // 0x03\n+    InfinityLoop, // 0x04\n+    Inc,          // 0x05\n+    Delete,       // 0x06\n }\n \n #[derive(Encode, Decode, Default)]\n@@ -38,7 +38,7 @@ extern \"C\" fn main() -> u64 {\n         if let Ok(new_command) = Command::decode(&mut tmp) {\n             command = new_command;\n         } else {\n-            return 222\n+            return 1;\n         }\n     }\n \n@@ -73,8 +73,6 @@ fn call_transfer() -> u64 {\n     unsafe { transfer(2, 0) }\n }\n \n-\n-\n fn call_inc() -> u64 {\n     // \"                                                             foo\"\n     // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\""
        }
      ],
      "additions": 8,
      "deletions": 10,
      "total_changes": 18,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "f8ce06807fb10533589830448a682c2a539d5cf6",
      "message": "Update examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T19:32:58+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/f8ce06807fb10533589830448a682c2a539d5cf6",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/src/main.rs",
          "additions": 52,
          "deletions": 21,
          "changes": 73,
          "status": "modified",
          "patch": "@@ -5,17 +5,51 @@ use parity_scale_codec::{Decode, Encode};\n \n qf_polkavm_sdk::host_functions!();\n \n+#[derive(Encode, Decode)]\n+enum Command {\n+    Transfer,       // 0x00\n+    Balance,        // 0x01\n+    BalanceOf,      // 0x02\n+    BlockNumber,    // 0x03\n+    InfinityLoop,   // 0x04\n+    Inc,            // 0x05\n+    Delete,         // 0x06\n+}\n+\n+#[derive(Encode, Decode, Default)]\n+struct Counter {\n+    counter: u32,\n+}\n+\n #[polkavm_derive::polkavm_export]\n-extern \"C\" fn main(op: u32) -> u64 {\n-    match op {\n-        0 => call_transfer(),\n-        1 => call_balance(),\n-        2 => call_balance_of(),\n-        3 => call_block_number(),\n-        4 => call_infinity_loop(),\n-        5 => call_inc(),\n-        6 => call_delete(),\n-        _ => unimplemented!(),\n+extern \"C\" fn main() -> u64 {\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n+\n+    let command: Command;\n+\n+    unsafe {\n+        match get_user_data(pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n+\n+        let mut tmp: &[u8] = &buffer;\n+        if let Ok(new_command) = Command::decode(&mut tmp) {\n+            command = new_command;\n+        } else {\n+            return 222\n+        }\n+    }\n+\n+    match command {\n+        Command::Transfer => call_transfer(),\n+        Command::Balance => call_balance(),\n+        Command::BalanceOf => call_balance_of(),\n+        Command::BlockNumber => call_block_number(),\n+        Command::InfinityLoop => call_infinity_loop(),\n+        Command::Inc => call_inc(),\n+        Command::Delete => call_delete(),\n     }\n }\n \n@@ -39,10 +73,7 @@ fn call_transfer() -> u64 {\n     unsafe { transfer(2, 0) }\n }\n \n-#[derive(Encode, Decode, Default)]\n-struct Counter {\n-    counter: u32,\n-}\n+\n \n fn call_inc() -> u64 {\n     // \"                                                             foo\"\n@@ -58,10 +89,10 @@ fn call_inc() -> u64 {\n     let pointer: *mut [u8; 64] = &mut buffer;\n \n     unsafe {\n-        let get_result = get(storage_key_pointer as u32, pointer as u32);\n-        if get_result != 0 {\n-            return get_result;\n-        };\n+        match get(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n+        }\n \n         let mut tmp: &[u8] = &buffer;\n         let mut counter = if buffer == [0u8; 64] {\n@@ -76,9 +107,9 @@ fn call_inc() -> u64 {\n             buffer[pos] = *elem\n         }\n \n-        let set_result = set(storage_key_pointer as u32, pointer as u32);\n-        if set_result != 0 {\n-            return set_result;\n+        match set(storage_key_pointer as u32, pointer as u32) {\n+            0 => (),\n+            other => return other,\n         }\n     }\n "
        }
      ],
      "additions": 52,
      "deletions": 21,
      "total_changes": 73,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "ff4622359936bc88cc84396402302c0477e62c6b",
      "message": "Update SDK",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T19:32:36+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/ff4622359936bc88cc84396402302c0477e62c6b",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 4,
          "deletions": 3,
          "changes": 7,
          "status": "modified",
          "patch": "@@ -8,7 +8,7 @@ macro_rules! host_functions {\n \n         static mut INNER: Option<InnerAlloc> = None;\n \n-        static mut RISCV_HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n+        static mut HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n \n         #[global_allocator]\n         static ALLOCATOR: BumpAllocator = BumpAllocator {};\n@@ -66,13 +66,13 @@ macro_rules! host_functions {\n             fn heap_start() -> usize {\n                 #[allow(static_mut_refs)]\n                 unsafe {\n-                    RISCV_HEAP.as_mut_ptr() as usize\n+                    HEAP.as_mut_ptr() as usize\n                 }\n             }\n \n             #[allow(static_mut_refs)]\n             fn heap_end() -> usize {\n-                Self::heap_start() + unsafe { RISCV_HEAP.len() }\n+                Self::heap_start() + unsafe { HEAP.len() }\n             }\n \n             #[allow(dead_code)]\n@@ -141,6 +141,7 @@ macro_rules! host_functions {\n             fn block_number() -> u64;\n             fn account_id() -> u64;\n             fn caller() -> u64;\n+            fn get_user_data(pointer: u32) -> u64;\n             fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n             fn set(storage_key_pointer: u32, buffer: u32) -> u64;\n             fn delete(storage_key_pointer: u32) -> u64;"
        }
      ],
      "additions": 4,
      "deletions": 3,
      "total_changes": 7,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "e52e203dd4d9b40443d81a0b8bdbce4e378987c1",
      "message": "cargo fmt",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T10:16:00+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/e52e203dd4d9b40443d81a0b8bdbce4e378987c1",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/src/main.rs",
          "additions": 14,
          "deletions": 6,
          "changes": 20,
          "status": "modified",
          "patch": "@@ -1,7 +1,7 @@\n #![no_std]\n #![no_main]\n \n-use parity_scale_codec::{Encode, Decode};\n+use parity_scale_codec::{Decode, Encode};\n \n qf_polkavm_sdk::host_functions!();\n \n@@ -47,7 +47,11 @@ struct Counter {\n fn call_inc() -> u64 {\n     // \"                                                             foo\"\n     // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 64] = &storage_key;\n \n     let mut buffer = [0u8; 64];\n@@ -56,7 +60,7 @@ fn call_inc() -> u64 {\n     unsafe {\n         let get_result = get(storage_key_pointer as u32, pointer as u32);\n         if get_result != 0 {\n-            return get_result\n+            return get_result;\n         };\n \n         let mut tmp: &[u8] = &buffer;\n@@ -74,7 +78,7 @@ fn call_inc() -> u64 {\n \n         let set_result = set(storage_key_pointer as u32, pointer as u32);\n         if set_result != 0 {\n-            return set_result\n+            return set_result;\n         }\n     }\n \n@@ -84,13 +88,17 @@ fn call_inc() -> u64 {\n fn call_delete() -> u64 {\n     // \"                                                             foo\"\n     // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n-    let storage_key: [u8; 64] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key: [u8; 64] = [\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n+        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111,\n+    ];\n     let storage_key_pointer: *const [u8; 64] = &storage_key;\n \n     unsafe {\n         let delete_result = delete(storage_key_pointer as u32);\n         if delete_result != 0 {\n-            return delete_result\n+            return delete_result;\n         };\n     }\n "
        },
        {
          "filename": "src/lib.rs",
          "additions": 2,
          "deletions": 5,
          "changes": 7,
          "status": "modified",
          "patch": "@@ -4,17 +4,14 @@\n #[macro_export]\n macro_rules! host_functions {\n     () => {\n-        use core::alloc::{\n-            GlobalAlloc,\n-            Layout,\n-        };\n+        use core::alloc::{GlobalAlloc, Layout};\n \n         static mut INNER: Option<InnerAlloc> = None;\n \n         static mut RISCV_HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n \n         #[global_allocator]\n-        static ALLOCATOR: BumpAllocator = BumpAllocator { };\n+        static ALLOCATOR: BumpAllocator = BumpAllocator {};\n \n         pub struct BumpAllocator;\n "
        }
      ],
      "additions": 16,
      "deletions": 11,
      "total_changes": 27,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "baec7aeb448956d21f7e9275ba969454677897ad",
      "message": "Update examples",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T10:14:37+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/baec7aeb448956d21f7e9275ba969454677897ad",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/src/main.rs",
          "additions": 50,
          "deletions": 8,
          "changes": 58,
          "status": "modified",
          "patch": "@@ -1,17 +1,20 @@\n #![no_std]\n #![no_main]\n \n+use parity_scale_codec::{Encode, Decode};\n+\n qf_polkavm_sdk::host_functions!();\n \n #[polkavm_derive::polkavm_export]\n extern \"C\" fn main(op: u32) -> u64 {\n     match op {\n         0 => call_transfer(),\n         1 => call_balance(),\n-        3 => call_block_number(),\n         2 => call_balance_of(),\n+        3 => call_block_number(),\n         4 => call_infinity_loop(),\n         5 => call_inc(),\n+        6 => call_delete(),\n         _ => unimplemented!(),\n     }\n }\n@@ -36,21 +39,60 @@ fn call_transfer() -> u64 {\n     unsafe { transfer(2, 0) }\n }\n \n+#[derive(Encode, Decode, Default)]\n+struct Counter {\n+    counter: u32,\n+}\n+\n fn call_inc() -> u64 {\n-    let mut buffer = [0u8; 8];\n-    let pointer: *mut [u8; 8] = &mut buffer;\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    let mut buffer = [0u8; 64];\n+    let pointer: *mut [u8; 64] = &mut buffer;\n \n     unsafe {\n-        if get(pointer as u32, 0u32) != 0 {\n-            return 1\n+        let get_result = get(storage_key_pointer as u32, pointer as u32);\n+        if get_result != 0 {\n+            return get_result\n+        };\n+\n+        let mut tmp: &[u8] = &buffer;\n+        let mut counter = if buffer == [0u8; 64] {\n+            Counter::default()\n+        } else {\n+            Counter::decode(&mut tmp).unwrap_or(Counter::default())\n         };\n \n-        buffer[7] += 1;\n+        counter.counter += 1;\n+\n+        for (pos, elem) in Counter::encode(&counter).iter().enumerate() {\n+            buffer[pos] = *elem\n+        }\n \n-        if set(pointer as u32, 0u32) != 0 {\n-            return 1\n+        let set_result = set(storage_key_pointer as u32, pointer as u32);\n+        if set_result != 0 {\n+            return set_result\n         }\n     }\n \n     0\n }\n+\n+fn call_delete() -> u64 {\n+    // \"                                                             foo\"\n+    // \"0x20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020666F6F\"\n+    let storage_key: [u8; 64] = [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 111];\n+    let storage_key_pointer: *const [u8; 64] = &storage_key;\n+\n+    unsafe {\n+        let delete_result = delete(storage_key_pointer as u32);\n+        if delete_result != 0 {\n+            return delete_result\n+        };\n+    }\n+\n+    0\n+}"
        }
      ],
      "additions": 50,
      "deletions": 8,
      "total_changes": 58,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "4e3a76a0b581b13d3cb7a94adf21b8e8277b44be",
      "message": "Update deps",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T10:13:47+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/4e3a76a0b581b13d3cb7a94adf21b8e8277b44be",
      "files_changed": [
        {
          "filename": "examples/example-smart-contract/Cargo.lock",
          "additions": 145,
          "deletions": 1,
          "changes": 146,
          "status": "modified",
          "patch": "@@ -2,14 +2,112 @@\n # It is not intended for manual editing.\n version = 4\n \n+[[package]]\n+name = \"arrayvec\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\n+\n+[[package]]\n+name = \"byte-slice-cast\"\n+version = \"1.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d\"\n+\n+[[package]]\n+name = \"const_format\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"126f97965c8ad46d6d9163268ff28432e8f6a1196a55578867832e3049df63dd\"\n+dependencies = [\n+ \"const_format_proc_macros\",\n+]\n+\n+[[package]]\n+name = \"const_format_proc_macros\"\n+version = \"0.2.34\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d57c2eccfb16dbac1f4e61e206105db5820c9d26c3c472bc17c774259ef7744\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-xid\",\n+]\n+\n+[[package]]\n+name = \"equivalent\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f\"\n+\n [[package]]\n name = \"example-smart-contract\"\n version = \"0.1.0\"\n dependencies = [\n+ \"parity-scale-codec\",\n  \"polkavm-derive\",\n  \"qf-polkavm-sdk\",\n ]\n \n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.15.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n+\n+[[package]]\n+name = \"impl-trait-for-tuples\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"indexmap\"\n+version = \"2.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058\"\n+dependencies = [\n+ \"equivalent\",\n+ \"hashbrown\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n+\n+[[package]]\n+name = \"parity-scale-codec\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d\"\n+dependencies = [\n+ \"arrayvec\",\n+ \"byte-slice-cast\",\n+ \"const_format\",\n+ \"impl-trait-for-tuples\",\n+ \"parity-scale-codec-derive\",\n+ \"rustversion\",\n+]\n+\n+[[package]]\n+name = \"parity-scale-codec-derive\"\n+version = \"3.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3\"\n+dependencies = [\n+ \"proc-macro-crate\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"polkavm-common\"\n version = \"0.21.0\"\n@@ -43,6 +141,15 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"proc-macro-crate\"\n+version = \"3.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35\"\n+dependencies = [\n+ \"toml_edit\",\n+]\n+\n [[package]]\n name = \"proc-macro2\"\n version = \"1.0.94\"\n@@ -55,7 +162,6 @@ dependencies = [\n [[package]]\n name = \"qf-polkavm-sdk\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/QuantumFusion-network/qf-polkavm-sdk#b3ede4ca4fcc1c4c3c119c315e72213ff420f817\"\n \n [[package]]\n name = \"quote\"\n@@ -66,6 +172,12 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n+[[package]]\n+name = \"rustversion\"\n+version = \"1.0.20\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2\"\n+\n [[package]]\n name = \"syn\"\n version = \"2.0.100\"\n@@ -77,8 +189,40 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n+[[package]]\n+name = \"toml_datetime\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\n+\n+[[package]]\n+name = \"toml_edit\"\n+version = \"0.22.24\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474\"\n+dependencies = [\n+ \"indexmap\",\n+ \"toml_datetime\",\n+ \"winnow\",\n+]\n+\n [[package]]\n name = \"unicode-ident\"\n version = \"1.0.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512\"\n+\n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n+\n+[[package]]\n+name = \"winnow\"\n+version = \"0.7.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36\"\n+dependencies = [\n+ \"memchr\",\n+]"
        },
        {
          "filename": "examples/example-smart-contract/Cargo.toml",
          "additions": 1,
          "deletions": 0,
          "changes": 1,
          "status": "modified",
          "patch": "@@ -5,6 +5,7 @@ edition = \"2021\"\n publish = false\n \n [dependencies]\n+parity-scale-codec = { version = \"3.7.4\", default-features = false, features = [ \"derive\" ]}\n polkavm-derive = { git = \"https://github.com/paritytech/polkavm.git\", tag = \"v0.21.0\" }\n qf-polkavm-sdk = { git = \"https://github.com/QuantumFusion-network/qf-polkavm-sdk\", ref = \"b3ede4ca4fcc1c4c3c119c315e72213ff420f817\" }\n "
        }
      ],
      "additions": 146,
      "deletions": 1,
      "total_changes": 147,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "b691e29cfa7f75b24762bde83ae01ea395fae91b",
      "message": "Update macros",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T07:54:15+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/b691e29cfa7f75b24762bde83ae01ea395fae91b",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 2,
          "deletions": 10,
          "changes": 12,
          "status": "modified",
          "patch": "@@ -9,19 +9,13 @@ macro_rules! host_functions {\n             Layout,\n         };\n \n-        /// A page in Wasm is `64KiB`\n-        /// todo: remove\n-        #[allow(dead_code)]\n-        const PAGE_SIZE: usize = 64 * 1024;\n-\n         static mut INNER: Option<InnerAlloc> = None;\n \n         static mut RISCV_HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n \n         #[global_allocator]\n         static ALLOCATOR: BumpAllocator = BumpAllocator { };\n \n-        /// A bump allocator suitable for use in a Wasm environment.\n         pub struct BumpAllocator;\n \n         unsafe impl GlobalAlloc for BumpAllocator {\n@@ -44,7 +38,7 @@ macro_rules! host_functions {\n             #[inline]\n             unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n                 // todo\n-                // A new page in Wasm is guaranteed to already be zero initialized, so we can just\n+                // A new page is guaranteed to already be zero initialized, so we can just\n                 // use our regular `alloc` call here and save a bit of work.\n                 //\n                 // See: https://webassembly.github.io/spec/core/exec/modules.html#growing-memories\n@@ -127,9 +121,7 @@ macro_rules! host_functions {\n \n         /// Calculates the number of pages of memory needed for an allocation of `size` bytes.\n         ///\n-        /// This function rounds up to the next page. For example, if we have an allocation of\n-        /// `size = PAGE_SIZE / 2` this function will indicate that one page is required to\n-        /// satisfy the allocation.\n+        /// This function rounds up to the next page.\n         #[inline]\n         #[allow(dead_code)]\n         fn required_pages(_size: usize) -> Option<usize> {"
        }
      ],
      "additions": 2,
      "deletions": 10,
      "total_changes": 12,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "e3ac86d2c215e5f1914a6e0a2ef70222d8036ce5",
      "message": "Update macros",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-13T04:37:44+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/e3ac86d2c215e5f1914a6e0a2ef70222d8036ce5",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 132,
          "deletions": 0,
          "changes": 132,
          "status": "modified",
          "patch": "@@ -4,6 +4,138 @@\n #[macro_export]\n macro_rules! host_functions {\n     () => {\n+        use core::alloc::{\n+            GlobalAlloc,\n+            Layout,\n+        };\n+\n+        /// A page in Wasm is `64KiB`\n+        /// todo: remove\n+        #[allow(dead_code)]\n+        const PAGE_SIZE: usize = 64 * 1024;\n+\n+        static mut INNER: Option<InnerAlloc> = None;\n+\n+        static mut RISCV_HEAP: [u8; 1024 * 1024] = [0; 1024 * 1024];\n+\n+        #[global_allocator]\n+        static ALLOCATOR: BumpAllocator = BumpAllocator { };\n+\n+        /// A bump allocator suitable for use in a Wasm environment.\n+        pub struct BumpAllocator;\n+\n+        unsafe impl GlobalAlloc for BumpAllocator {\n+            #[inline]\n+            #[allow(static_mut_refs)]\n+            unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+                if INNER.is_none() {\n+                    INNER = Some(InnerAlloc::new());\n+                };\n+                match INNER\n+                    .as_mut()\n+                    .expect(\"We just set the value above; qed\")\n+                    .alloc(layout)\n+                {\n+                    Some(start) => start as *mut u8,\n+                    None => core::ptr::null_mut(),\n+                }\n+            }\n+\n+            #[inline]\n+            unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+                // todo\n+                // A new page in Wasm is guaranteed to already be zero initialized, so we can just\n+                // use our regular `alloc` call here and save a bit of work.\n+                //\n+                // See: https://webassembly.github.io/spec/core/exec/modules.html#growing-memories\n+                self.alloc(layout)\n+            }\n+\n+            #[inline]\n+            unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+        }\n+\n+        #[derive(Debug, Copy, Clone)]\n+        struct InnerAlloc {\n+            /// Points to the start of the next available allocation.\n+            next: usize,\n+\n+            /// The address of the upper limit of our heap.\n+            upper_limit: usize,\n+        }\n+\n+        impl InnerAlloc {\n+            fn new() -> Self {\n+                Self {\n+                    next: Self::heap_start(),\n+                    upper_limit: Self::heap_end(),\n+                }\n+            }\n+\n+            fn heap_start() -> usize {\n+                #[allow(static_mut_refs)]\n+                unsafe {\n+                    RISCV_HEAP.as_mut_ptr() as usize\n+                }\n+            }\n+\n+            #[allow(static_mut_refs)]\n+            fn heap_end() -> usize {\n+                Self::heap_start() + unsafe { RISCV_HEAP.len() }\n+            }\n+\n+            #[allow(dead_code)]\n+            fn request_pages(&mut self, _pages: usize) -> Option<usize> {\n+                // On riscv the memory can't be grown\n+                core::panic!(\"no request possible\");\n+            }\n+\n+            /// Tries to allocate enough memory on the heap for the given `Layout`. If there is\n+            /// not enough room on the heap it'll try and grow it by a page.\n+            ///\n+            /// Note: This implementation results in internal fragmentation when allocating across\n+            /// pages.\n+            fn alloc(&mut self, layout: Layout) -> Option<usize> {\n+                let alloc_start = self.align_ptr(&layout);\n+\n+                let aligned_size = layout.size();\n+\n+                let alloc_end = alloc_start.checked_add(aligned_size)?;\n+\n+                if alloc_end > self.upper_limit {\n+                    panic!(\"exhausted heap limit\");\n+                } else {\n+                    self.next = alloc_end;\n+                    Some(alloc_start)\n+                }\n+            }\n+\n+            /// Aligns the start pointer of the next allocation.\n+            ///\n+            /// We inductively calculate the start index\n+            /// of a layout in the linear memory.\n+            /// - Initially `self.next` is `0`` and aligned\n+            /// - `layout.align() - 1` accounts for `0` as the first index.\n+            /// - the binary with the inverse of the align creates a bitmask that is used to zero\n+            ///   out bits, ensuring alignment according to type requirements and ensures that the\n+            ///   next allocated pointer address is of the power of 2.\n+            #[allow(clippy::arithmetic_side_effects)] // todo\n+            fn align_ptr(&self, layout: &Layout) -> usize {\n+                (self.next + layout.align() - 1) & !(layout.align() - 1)\n+            }\n+        }\n+\n+        /// Calculates the number of pages of memory needed for an allocation of `size` bytes.\n+        ///\n+        /// This function rounds up to the next page. For example, if we have an allocation of\n+        /// `size = PAGE_SIZE / 2` this function will indicate that one page is required to\n+        /// satisfy the allocation.\n+        #[inline]\n+        #[allow(dead_code)]\n+        fn required_pages(_size: usize) -> Option<usize> {\n+            core::panic!(\"required_pages\");\n+        }\n+\n         #[panic_handler]\n         fn panic(_info: &core::panic::PanicInfo) -> ! {\n             unsafe {"
        }
      ],
      "additions": 132,
      "deletions": 0,
      "total_changes": 132,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    },
    {
      "sha": "2f1f94df5461356d9f3cbd825b487c68668b08d2",
      "message": "Update macros",
      "author": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "committer": {
        "name": null,
        "email": "aaorlov1@gmail.com",
        "username": "andor0",
        "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
      },
      "timestamp": "2025-05-12T13:57:03+00:00",
      "repository": "QuantumFusion-network/qf-polkavm-sdk",
      "branch": "main",
      "url": "https://github.com/QuantumFusion-network/qf-polkavm-sdk/commit/2f1f94df5461356d9f3cbd825b487c68668b08d2",
      "files_changed": [
        {
          "filename": "src/lib.rs",
          "additions": 3,
          "deletions": 0,
          "changes": 3,
          "status": "modified",
          "patch": "@@ -20,6 +20,9 @@ macro_rules! host_functions {\n             fn block_number() -> u64;\n             fn account_id() -> u64;\n             fn caller() -> u64;\n+            fn get(storage_key_pointer: u32, pointer: u32) -> u64;\n+            fn set(storage_key_pointer: u32, buffer: u32) -> u64;\n+            fn delete(storage_key_pointer: u32) -> u64;\n         }\n     };\n }"
        }
      ],
      "additions": 3,
      "deletions": 0,
      "total_changes": 3,
      "commit_type": "other",
      "is_breaking_change": false,
      "affects_security": false,
      "affects_performance": false,
      "pull_request_number": null,
      "issues_closed": [],
      "tags": []
    }
  ],
  "start_time": "2025-05-11T13:27:35.153040",
  "end_time": "2025-06-10T13:27:35.153040",
  "repository": "QuantumFusion-network/qf-polkavm-sdk",
  "total_commits": 48,
  "total_additions": 3995,
  "total_deletions": 2425,
  "total_files_changed": 144,
  "commit_types": {
    "other": 35,
    "documentation": 13
  },
  "top_contributors": [
    {
      "name": "andor0",
      "commits": 27,
      "additions": 813,
      "deletions": 1075,
      "avatar_url": "https://avatars.githubusercontent.com/u/8004833?v=4"
    },
    {
      "name": "dedok",
      "commits": 13,
      "additions": 1821,
      "deletions": 870,
      "avatar_url": "https://avatars.githubusercontent.com/u/1643154?v=4"
    },
    {
      "name": "khssnv",
      "commits": 6,
      "additions": 112,
      "deletions": 42,
      "avatar_url": "https://avatars.githubusercontent.com/u/833019?v=4"
    },
    {
      "name": "zotho",
      "commits": 2,
      "additions": 1249,
      "deletions": 438,
      "avatar_url": "https://avatars.githubusercontent.com/u/22890821?v=4"
    }
  ],
  "most_changed_files": [
    {
      "filename": "examples/increment-counter/Cargo.lock",
      "changes": 916,
      "commits": 4
    },
    {
      "filename": "examples/get-account-balance/Cargo.lock",
      "changes": 628,
      "commits": 5
    },
    {
      "filename": "examples/get-contract-balance/Cargo.lock",
      "changes": 628,
      "commits": 5
    },
    {
      "filename": "examples/get-block-number/Cargo.lock",
      "changes": 626,
      "commits": 5
    },
    {
      "filename": "upload_and_execute.js",
      "changes": 576,
      "commits": 4
    },
    {
      "filename": "src/lib.rs",
      "changes": 564,
      "commits": 11
    },
    {
      "filename": "README.md",
      "changes": 340,
      "commits": 20
    },
    {
      "filename": "examples/increment-counter/src/main.rs",
      "changes": 292,
      "commits": 4
    },
    {
      "filename": "examples/example-smart-contract/Cargo.lock",
      "changes": 292,
      "commits": 2
    },
    {
      "filename": "examples/example-smart-contract/src/main.rs",
      "changes": 280,
      "commits": 5
    }
  ],
  "breaking_changes": 0,
  "security_updates": 2
}